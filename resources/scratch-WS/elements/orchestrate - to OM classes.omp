; OM File Header - Saved 2023/11/08 11:45:27
; (7.04 :patc (om-make-point 30 139) (om-make-point 0 0) (om-make-point 1304 1062) "" 183 0 "2023/11/01 11:27:42" "2023/11/08 11:45:27")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"../out-files/omorch-2023-11-08_11:42:33/africa.config.txt\"") (list (quote :sound) "#P\"../out-files/omorch-2023-11-08_11:42:33/africa.wav\"" "#P\"../../../../../../../../prosjekter/STRYKEKVARTETT/LYD/Webern_Opus_5_BITER/Webern_1_01_1_08_44.1k.wav\"" "#P\"../../../../../CSOL/africa.wav\""))
(in-package :om)(load-lib-for (quote ("OMOrch")))(setf *om-current-persistent* (om-load-patch1 "orchestrate - to OM classes" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 508 164) (om-make-point 35 30) 0.8 "0.8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 315 70) (quote "ensemble - names from the sound-database in use$$Check resources/FullSOL2020_all_01_instruments.org$for some names in FullSOL db.") "" (om-make-point 595 67) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 106 28) (quote "onsets threshold") "" (om-make-point 514 193) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 401 74) (om-make-point 112 30) "Cb Cb Cb Fl Fl Fl" "\"Cb Cb Cb Fl Fl Fl\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 197 40) (quote "set paths to db-file first") "" (om-make-point 485 229) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 17.33203125D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 67 670) (om-make-point 254 103) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-08_11:42:33")) :device nil :host nil :name "africa" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 1058 459) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 295 42) (quote "orch-note metadata is carried through to new object$") "" (om-make-point 811 826) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 739 832) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 704 884) (om-make-point 210 88) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (5200) (7200) (7200) (3300) (7200) (7400) (7200) (3300) (3300) (5900) (7200) (3300) (7800) (5900) (7700) (6400) (6100) (7600) (7200) (6000) (4700) (3300) (6000) (6400))) :lonset (quote (0 125 375 500 750 875 1200 1400 1600 1800 2000 2250 2375 2625 2750 3000 3167 3500 3667 3833 4000 4333 4667 4833 5000 6000)) :ldur (quote ((125) (250) (125) (250) (125) (325) (200) (200) (200) (200) (250) (125) (250) (125) (250) (167) (333) (167) (167) (167) (333) (333) (167) (167) (1000))) :lvel (quote ((85) (85) (85) (85) (20) (85) (85) (85) (20) (20) (85) (100) (20) (40) (115) (85) (40) (85) (85) (85) (85) (115) (20) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_one_sec" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "on_tuning_pegs" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_tasto" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((24 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 787 444) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Webern_1_01_1_08_44.1k.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 91 123) (om-make-point 126 55) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "prosjekter" "STRYKEKVARTETT" "LYD" "Webern_Opus_5_BITER")) :device nil :host nil :name "Webern_1_01_1_08_44.1k" :type "wav") 0 0.19999999 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Webern_1_01_1_08_44.1k.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 626 676) (om-make-point 382 128) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 1 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 2 1 2)) (1 (1 2 1 1 1)))) ((3 4) ((1 (2 2 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (200)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (200)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (333)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 1 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 2 1 2)) (1 (1 2 1 2)))) ((3 4) ((1 (2.0 1 2 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (143)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (286)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (143)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (143)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 3 3 1)) (1 (2.0 1 4 1.0)) (1 (3 2 3)) (1 (1 2 1 1 1)))) ((3 4) ((1 (1 1 2)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (167)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8100)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 1 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 2 1 2)) (1 (1 2 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (200)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 3 1 1)) (1 (3.0 2 3)) (1 (2 1 2 1 2)) (1 (1 2 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) (1 (4.0 1.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (125)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 1 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 4)) (1 (1 2 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (286)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (143)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (571)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (167)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (167)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (200)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((0 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_one_sec" :from-file t))) ((0 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((0 0 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 0 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "on_tuning_pegs" :from-file t))) ((0 0 0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((0 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((0 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 0 1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 0 1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((0 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((0 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 0 2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((0 0 2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((0 0 2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((0 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((0 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((0 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((0 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_tasto" :from-file t))) ((0 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((0 0 3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((0 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((0 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((0 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 1 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((1 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((1 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((1 0 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((1 0 0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((1 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((1 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((1 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 0 1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((1 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "crush_ord" :from-file t))) ((1 0 2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 0 2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto" :from-file t))) ((1 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_lv" :from-file t))) ((1 1 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 1 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((1 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((2 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((2 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((2 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((2 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((2 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((2 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((2 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((2 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((2 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((2 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "legno_batt" :from-file t))) ((2 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((2 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((2 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((2 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((2 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((2 0 3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((2 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((2 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((2 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cresc" :from-file t))) ((2 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((3 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((3 0 0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t))) ((3 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t))) ((3 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((3 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 0 2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((3 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0 3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((3 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((3 1 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 1 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 1 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 1 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((4 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((4 0 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((4 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((4 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 0 3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((4 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((4 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((4 1 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((4 1 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 1 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((4 1 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 1 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((4 1 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 1 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((5 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 0 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 0 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 0 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((5 0 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 0 0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 0 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((5 0 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "decresc" :from-file t))) ((5 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 0 1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 0 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((5 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 0 2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_half_sec" :from-file t))) ((5 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((5 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((5 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 0 3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 1 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 1 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 1 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 1 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 1 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 1 0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((5 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 329/100 nil 1000 0 (om-make-point 1586 911) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 745 489) (om-make-point 332 163) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (5200) (7200) (7200) (3300) (7200) (7400) (7200) (3300) (3300) (5900) (7200) (3300) (7800) (5900) (7700) (6400) (6100) (7600) (7200) (6000) (4700) (3300) (6000) (6400))) :lonset (quote (0 139 371 511 789 929 1207 1347 1579 1765 1997 2276 2415 2647 2786 3065 3204 3483 3622 3854 4040 4412 4690 4830 5062 5230)) :ldur (quote ((139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (279) (139) (232) (139) (279) (139) (279) (139) (232) (186) (371) (279) (139) (232) (168))) :lvel (quote ((85) (85) (85) (85) (20) (85) (85) (85) (20) (20) (85) (100) (20) (40) (115) (85) (40) (85) (85) (85) (85) (115) (20) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_one_sec" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "on_tuning_pegs" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_tasto" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((24 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (3300) (3300) (8400) (6500) (7500) (7800) (5600) (7200) (7400) (5200) (3300) (7500) (6200) (4300) (5300) (6000) (6200) (7200) (3300) (7200) (8400) (5600) (7400))) :lonset (quote (0 139 371 511 789 929 1207 1347 1579 1765 1997 2276 2415 2647 2786 3065 3204 3483 3622 4272 4412 4690 4830 5062 5230)) :ldur (quote ((139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (279) (139) (232) (139) (279) (139) (279) (139) (650) (139) (279) (139) (232) (168))) :lvel (quote ((100) (20) (20) (85) (85) (115) (115) (85) (100) (85) (85) (20) (85) (85) (85) (115) (85) (85) (115) (20) (115) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "crush_ord" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_lv" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (8700) (5900) (6400) (6800) (6300) (5000) (6000) (7400) (3300) (4600) (6000) (4700) (8100) (5600) (8400) (7700) (5300))) :lonset (quote (0 139 511 929 1207 1347 1997 2415 2647 3065 3204 3483 3622 3854 4040 4272 4412 5062 5230)) :ldur (quote ((139) (232) (279) (279) (139) (232) (279) (232) (418) (139) (279) (139) (232) (186) (232) (139) (279) (168))) :lvel (quote ((100) (85) (115) (85) (85) (115) (85) (85) (85) (20) (85) (85) (115) (85) (85) (85) (40) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "legno_batt" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cresc" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7800) (8350) (8400) (7200) (7800) (7400) (7200) (7700) (8000) (7200) (7700) (8400) (7950) (7200) (7300) (7500) (7300) (8000) (7700) (7800) (7150) (8700) (7200) (7950) (7800))) :lonset (quote (0 139 371 511 789 929 1207 1347 1579 1765 1997 2276 2415 2647 2786 3065 3204 3483 3622 3854 4040 4272 4412 4690 4830 5062 5230)) :ldur (quote ((139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (279) (139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (139) (279) (139) (232) (168))) :lvel (quote ((40) (40) (85) (85) (85) (85) (85) (115) (85) (85) (115) (115) (40) (85) (115) (115) (85) (115) (85) (115) (40) (115) (85) (115) (115) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((24 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((25 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (8400) (7700) (7500) (7900) (8400) (7700) (7200) (8700) (7700) (7800) (8700) (8400) (7800) (7700) (8400) (7600) (7500) (7800) (8350) (7500) (7700))) :lonset (quote (0 139 371 789 929 1347 1579 1997 2276 2415 2647 2786 3065 3204 3483 3622 3854 4040 4272 4412 4690 4830 5231)) :ldur (quote ((139) (232) (418) (139) (418) (232) (418) (279) (139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (139) (279) (139) (401))) :lvel (quote ((115) (85) (115) (85) (85) (40) (115) (115) (40) (40) (85) (85) (115) (115) (115) (115) (85) (85) (115) (85) (85) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (7200) (7800) (7500) (7700) (8000) (7800) (7500) (8700) (7150) (8700) (7700) (8000) (7700) (8000) (7900) (7700) (8350) (7200) (7700) (7500) (7800) (8700) (7400))) :lonset (quote (0 139 371 511 789 929 1207 1347 1579 1765 1997 2276 2415 3065 3204 3483 3622 3854 4040 4272 4412 4690 4830 5062 5230)) :ldur (quote ((139) (232) (139) (279) (139) (279) (139) (232) (186) (232) (279) (139) (232) (139) (279) (139) (232) (186) (232) (139) (279) (139) (232) (168))) :lvel (quote ((115) (85) (40) (100) (85) (85) (85) (115) (85) (115) (85) (85) (85) (115) (85) (85) (115) (85) (85) (115) (115) (40) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "decresc" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_half_sec" :from-file t))) ((13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_one_sec" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "on_tuning_pegs" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((0 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((0 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((0 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((0 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((0 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((0 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((0 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((0 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_tasto" :from-file t))) ((0 18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((0 19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((0 20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((0 21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((0 22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((0 23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((0 24 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((1 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((1 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((1 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "crush_ord" :from-file t))) ((1 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((1 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((1 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto" :from-file t))) ((1 18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((1 20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_lv" :from-file t))) ((1 21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "nonvib" :from-file t))) ((1 22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((1 23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "tasto_trem" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "legno_batt" :from-file t))) ((2 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((2 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trem_ord" :from-file t))) ((2 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "hit_body" :from-file t))) ((2 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((2 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pizz_bartok" :from-file t))) ((2 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((2 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont_trem" :from-file t))) ((2 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "art_harm_trem" :from-file t))) ((2 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((2 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cresc" :from-file t))) ((2 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "pont" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((3 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((3 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((3 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((3 21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((3 23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((3 24 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 24 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((3 25 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 25 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "cre_dec" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((4 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((4 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing_uni" :from-file t))) ((4 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((4 18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((4 19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((4 20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((4 21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "play_and_sing" :from-file t))) ((5 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "sfz" :from-file t))) ((5 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "stacc" :from-file t))) ((5 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "decresc" :from-file t))) ((5 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 9 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 9 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 10 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 10 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "dsclrd_fngr" :from-file t))) ((5 11 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 11 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 12 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 12 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "lasting_half_sec" :from-file t))) ((5 13 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 13 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 14 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 14 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt_ord" :from-file t))) ((5 15 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 15 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_flatt" :from-file t))) ((5 16 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 16 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 17 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 17 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord" :from-file t))) ((5 18 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 18 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_min_second" :from-file t))) ((5 19 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 19 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 20 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 20 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "aeol_and_ord" :from-file t))) ((5 21 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 21 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "flatt" :from-file t))) ((5 22 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 22 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "trill_maj_second" :from-file t))) ((5 23 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 23 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -2.5 :thetext "ord_aeol" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g^8) (quote g) (quote f) (quote g) (quote g^8) (quote g^8)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 221/50 nil 1000 0 (om-make-point 1460 874) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE
Cb
Cb
Cb
Fl
Fl
Fl" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 180 560) (om-make-point 238 112) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 2 1 2 1 1)) (1 (1.0 1 1 1 1)) (1 (2 1 2 1 2)) (1 (1 2 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6400 7200 6100 8400 7700 7800)) :ldur (quote (125 125 125 125 125 125)) :lvel (quote (85 100 100 40 115 115)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 3300 8700 7800 8400 7200)) :ldur (quote (250 250 250 250 250 250)) :lvel (quote (85 0 85 40 85 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 3300 8350 7700 7800)) :ldur (quote (125 125 125 125 125)) :lvel (quote (85 0 85 115 40)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 8400 5900 8400 7500)) :ldur (quote (250 250 250 250 250)) :lvel (quote (85 85 115 85 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 6500 7200 7500 7700)) :ldur (quote (125 125 125 125 125)) :lvel (quote (0 85 85 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7500 6400 7800 7900 8000)) :ldur (quote (125 125 125 125 125 125)) :lvel (quote (85 115 85 85 85 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7800 6800 7400 7800)) :ldur (quote (200 200 200 200 200)) :lvel (quote (85 115 85 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 5600 6300 7200 8400 7500)) :ldur (quote (200 200 200 200 200 200)) :lvel (quote (85 85 115 115 40 115)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 7200 7700 7700 8700)) :ldur (quote (200 200 200 200 200)) :lvel (quote (0 100 85 115 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 7400 8000 7150)) :ldur (quote (200 200 200 200)) :lvel (quote (0 85 85 115)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 5200 5000 7200 7200 8700)) :ldur (quote (250 250 250 250 250 250)) :lvel (quote (85 85 85 115 115 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 3300 7700 8700 7700)) :ldur (quote (125 125 125 125 125)) :lvel (quote (100 0 115 40 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 7500 6000 8400 7700 8000)) :ldur (quote (250 250 250 250 250 250)) :lvel (quote (0 85 85 40 40 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6200 7400 7950 7800)) :ldur (quote (125 125 125 125 125)) :lvel (quote (40 85 85 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 4300 7200 8700)) :ldur (quote (250 250 250 250)) :lvel (quote (115 85 115 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 5300 3300 7300 8400 7700)) :ldur (quote (167 167 167 167 167 167)) :lvel (quote (85 115 0 115 115 115)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 6000 4600 7500 7800 8000)) :ldur (quote (333 333 333 333 333 333)) :lvel (quote (40 85 85 85 115 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6200 6000 7300 7700 7900)) :ldur (quote (167 167 167 167 167 167)) :lvel (quote (85 85 85 115 115 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 7200 4700 8000 8400 7700)) :ldur (quote (167 167 167 167 167 167)) :lvel (quote (85 115 115 85 115 115)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 8100 7700 7600 8350)) :ldur (quote (167 167 167 167 167)) :lvel (quote (85 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5600 7800 7500 7200)) :ldur (quote (200 200 200 200 200)) :lvel (quote (85 85 40 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 8400 7150 7800 7700)) :ldur (quote (200 200 200 200 200)) :lvel (quote (0 85 115 115 115)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 7200 7700 8700 8350 7500)) :ldur (quote (200 200 200 200 200 200)) :lvel (quote (115 115 40 85 85 115)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300 8400 7200 7500 7800)) :ldur (quote (200 200 200 200 200)) :lvel (quote (0 85 115 85 40)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 5600 7950 7700 8700)) :ldur (quote (200 200 200 200 200)) :lvel (quote (85 85 115 115 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400 7400 5300 7800 7400)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (85 85 85 115 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "VOICE
Cb
Cb
Cb
Fl
Fl
Fl") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 27/25 nil 1000 0 (om-make-point 1084 546) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ
Cb
Cb
Cb
Fl
Fl
Fl" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 440 551) (om-make-point 219 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400 7200 6100 8400 7700 7800) (5200 3300 8700 7800 8400 7200) (7200 3300 8350 7700 7800) (7200 8400 5900 8400 7500) (3300 6500 7200 7500 7700) (7200 7500 6400 7800 7900 8000) (7400 7800 6800 7400 7800) (7200 5600 6300 7200 8400 7500) (3300 7200 7700 7700 8700) (3300 7400 8000 7150) (5900 5200 5000 7200 7200 8700) (7200 3300 7700 8700 7700) (3300 7500 6000 8400 7700 8000) (7800 6200 7400 7950 7800) (5900 4300 7200 8700) (7700 5300 3300 7300 8400 7700) (6400 6000 4600 7500 7800 8000) (6100 6200 6000 7300 7700 7900) (7600 7200 4700 8000 8400 7700) (7200 8100 7700 7600 8350) (6000 5600 7800 7500 7200) (3300 8400 7150 7800 7700) (4700 7200 7700 8700 8350 7500) (3300 8400 7200 7500 7800) (6000 5600 7950 7700 8700) (6400 7400 5300 7800 7400))) :lonset (quote (0 139 371 511 789 929 1207 1347 1579 1765 1997 2276 2415 2647 2786 3065 3204 3483 3622 3854 4040 4272 4412 4690 4830 5062 5231)) :ldur (quote ((139 139 139 139 139 139) (232 232 232 232 232 232) (139 139 139 418 139) (279 279 279 279 279) (139 139 139 139 139) (279 279 279 279 418 279) (139 139 139 139 139) (232 232 232 232 232 232) (186 186 186 418 186) (232 232 232 232) (279 279 279 279 279 279) (139 139 139 139 139) (232 232 232 232 232 232) (139 139 418 139 139) (279 279 279 279) (139 139 139 139 139 139) (279 279 279 279 279 279) (139 139 139 139 139 139) (232 650 232 232 232 232) (186 186 186 186 186) (371 232 232 232 232) (139 139 139 139 139) (279 279 279 279 279 279) (139 139 139 139 139) (232 232 232 401 232) (168 168 168 168 168))) :lvel (quote ((85 100 100 40 115 115) (85 0 85 40 85 85) (85 0 85 115 40) (85 85 115 85 100) (0 85 85 85 85) (85 115 85 85 85 85) (85 115 85 85 85) (85 85 115 115 40 115) (0 100 85 115 85) (0 85 85 115) (85 85 85 115 115 85) (100 0 115 40 85) (0 85 85 40 40 85) (40 85 85 85 85) (115 85 115 85) (85 115 0 115 115 115) (40 85 85 85 115 85) (85 85 85 115 115 85) (85 115 115 85 115 115) (85 85 115 85 85) (85 85 40 85 85) (0 85 115 115 115) (115 115 40 85 85 115) (0 85 115 85 40) (85 85 115 115 85) (85 85 85 115 85))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "CHORD-SEQ
Cb
Cb
Cb
Fl
Fl
Fl") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 267/100 nil 1000 0 (om-make-point 1205 493) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 250 111) (om-make-point 149 65) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 871 565) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 460 182) (om-make-point 35 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source target object" "TARGET" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *orchidea-default-orchestration*)) (om-load-inputfun (quote input-funbox) "onsets threshold (ex. static = 2, dynamic = 0.1)" "ONSETS-THRESHOLD" 0.7))) (om-make-point 367 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCHESTRATION" (quote orchestration) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "target-sound" nil) (om-load-inputfun (quote input-funbox) "" "output-sound" nil) (om-load-inputfun (quote input-funbox) "" "orch-output" nil) (om-load-inputfun (quote input-funbox) "" "command-line" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "config" nil) (om-load-inputfun (quote input-funbox) "" "onsets-threshold" 1))) (om-make-point 181 316) (om-make-point 425 161) (let ((target-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (output-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-08_11:42:33")) :device nil :host nil :name "africa" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6400 :vel 85 :dur 139 :chan 1 :instrument "CB" :style (quote trem_ord) :pitch-name "E3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-E3-MF-1C-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 100 :dur 139 :chan 2 :instrument "CB" :style (quote sfz) :pitch-name "C4" :dynamic "FP" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SFORZATO/CB-SFZ-C4-FP-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6100 :vel 100 :dur 139 :chan 3 :instrument "CB" :style (quote sfz) :pitch-name "C#3" :dynamic "F" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SFORZATO/CB-SFZ-C#3-F-1C-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 139 :chan 4 :instrument "FL" :style (quote cre_dec) :pitch-name "C5" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-C5-PPMFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 139 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 139 :chan 6 :instrument "FL" :style (quote flatt) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 139.32 :duration 232.177 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5200 :vel 85 :dur 232 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "E2" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-E2-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 232 :chan 2 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 232 :chan 3 :instrument "CB" :style (quote art_harm) :pitch-name "D#5" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/ARTIFICIAL_HARMONIC/CB-ART_HARM-D#5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 232 :chan 4 :instrument "FL" :style (quote cre_dec) :pitch-name "F#4" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-F#4-PPMFPP-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 232 :chan 5 :instrument "FL" :style (quote ord_flatt) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-C5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 232 :chan 6 :instrument "FL" :style (quote play_and_sing) :pitch-name "C4+C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING/FL-PLAY_AND_SING-C4+C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 371.497 :duration 139.297 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 139 :chan 1 :instrument "CB" :style (quote lasting_one_sec) :pitch-name "C4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/NOTE_LASTING/CB-LASTING_ONE_SEC-C4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 2 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 3 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-3-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8350 :vel 85 :dur 139 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "BQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 418 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 139 :chan 6 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "PP" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-PP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 278.639 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 279 :chan 1 :instrument "CB" :style (quote nonvib) :pitch-name "C4" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/NON_VIBRATO/CB-NONVIB-C4-MF-2C-T14U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 279 :chan 2 :instrument "CB" :style (quote art_harm) :pitch-name "C5" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/ARTIFICIAL_HARMONIC/CB-ART_HARM-C5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 279 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 279 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-MF-N-T17D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 100 :dur 279 :chan 6 :instrument "FL" :style (quote sfz) :pitch-name "D#4" :dynamic "FP" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-D#4-FP-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 789.478 :duration 139.297 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 1 :instrument "CB" :style (quote on_tuning_pegs) :pitch-name "N" :dynamic "N" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/ON_THE_TUNING_PEGS/CB-ON_TUNING_PEGS-N-N-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 139 :chan 2 :instrument "CB" :style (quote trill_min_second) :pitch-name "F3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TRILL_MINOR_SECOND_UP/CB-TRILL_MIN_SECOND-F3-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 139 :chan 4 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 139 :chan 5 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#4-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 139 :chan 6 :instrument "FL" :style (quote trill_min_second) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-F4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 928.798 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 279 :chan 1 :instrument "CB" :style (quote art_harm) :pitch-name "C4" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/ARTIFICIAL_HARMONIC/CB-ART_HARM-C4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 115 :dur 279 :chan 2 :instrument "CB" :style (quote pizz_bartok) :pitch-name "D#4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-D#4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6400 :vel 85 :dur 279 :chan 3 :instrument "CB" :style (quote tasto_trem) :pitch-name "E3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_TASTO_TREMOLO/CB-TASTO_TREM-E3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 279 :chan 4 :instrument "FL" :style (quote ord_aeol) :pitch-name "F#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_AEOLIAN/FL-ORD_AEOL-F#4-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 418 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 279 :chan 6 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 139 :chan 1 :instrument "CB" :style (quote trem_ord) :pitch-name "D4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-D4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 139 :chan 2 :instrument "CB" :style (quote trem) :pitch-name "F#4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F#4-FF-1C-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6800 :vel 85 :dur 139 :chan 3 :instrument "CB" :style (quote pont) :pitch-name "G#3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-G#3-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 139 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-D4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 139 :chan 6 :instrument "FL" :style (quote stacc) :pitch-name "F#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-F#4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1346.76 :duration 232.2 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 232 :chan 1 :instrument "CB" :style (quote trem_ord) :pitch-name "C4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-C4-MF-1C-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 232 :chan 2 :instrument "CB" :style (quote pont) :pitch-name "G#2" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-G#2-MF-2C-T13U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6300 :vel 115 :dur 232 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "D#3" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-D#3-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 232 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 232 :chan 5 :instrument "FL" :style (quote cre_dec) :pitch-name "C5" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-C5-PPMFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 115 :dur 232 :chan 6 :instrument "FL" :style (quote decresc) :pitch-name "D#4" :dynamic "FFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/DECRESCENDO/FL-DECRESC-D#4-FFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1578.96 :duration 185.737 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 186 :chan 1 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 100 :dur 186 :chan 2 :instrument "CB" :style (quote sfz) :pitch-name "C4" :dynamic "FP" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SFORZATO/CB-SFZ-C4-FP-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 186 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 418 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 186 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-D#5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1764.69 :duration 232.2 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 232 :chan 1 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 232 :chan 2 :instrument "CB" :style (quote trem_ord) :pitch-name "D4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-D4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 232 :chan 4 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 232 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1996.89 :duration 278.639 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 85 :dur 279 :chan 1 :instrument "CB" :style (quote pont) :pitch-name "B2" :dynamic "MF" :instance (quote |3C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-B2-MF-3C-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5200 :vel 85 :dur 279 :chan 2 :instrument "CB" :style (quote pont) :pitch-name "E2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-E2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5000 :vel 85 :dur 279 :chan 3 :instrument "CB" :style (quote legno_batt) :pitch-name "D2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/COL_LEGNO_BATTUTO/CB-LEGNO_BATT-D2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 279 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 279 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 279 :chan 6 :instrument "FL" :style (quote dsclrd_fngr) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/DISCOLORED_FINGERING/FL-DSCLRD_FNGR-D#5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2275.56 :duration 139.297 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 100 :dur 139 :chan 1 :instrument "CB" :style (quote sfz) :pitch-name "C4" :dynamic "F" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SFORZATO/CB-SFZ-C4-F-1C-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 2 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 139 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 40 :dur 139 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "D#5" :dynamic "PP" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-D#5-PP-N-T10U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 139 :chan 6 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2414.85 :duration 232.2 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 232 :chan 1 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 232 :chan 2 :instrument "CB" :style (quote crush_ord) :pitch-name "D#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/CRUSHED_TO_ORDINARIO/CB-CRUSH_ORD-D#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 232 :chan 3 :instrument "CB" :style (quote trill_maj_second) :pitch-name "C3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TRILL_MAJOR_SECOND_UP/CB-TRILL_MAJ_SECOND-C3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 232 :chan 4 :instrument "FL" :style (quote cre_dec) :pitch-name "C5" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-C5-PPMFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 40 :dur 232 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "PP" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-PP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 232 :chan 6 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2647.07 :duration 139.297 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 139 :chan 1 :instrument "CB" :style (quote nonvib) :pitch-name "F#4" :dynamic "PP" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/NON_VIBRATO/CB-NONVIB-F#4-PP-1C-T14D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6200 :vel 85 :dur 139 :chan 2 :instrument "CB" :style (quote trem) :pitch-name "D3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-D3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 418 :chan 3 :instrument "CB" :style (quote trem_ord) :pitch-name "D4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-D4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7950 :vel 85 :dur 139 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "GQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-GQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 139 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "F#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 279 :chan 1 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4300 :vel 85 :dur 279 :chan 2 :instrument "CB" :style (quote pont) :pitch-name "G1" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-G1-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 279 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 279 :chan 5 :instrument "FL" :style (quote dsclrd_fngr) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/DISCOLORED_FINGERING/FL-DSCLRD_FNGR-D#5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 139 :chan 1 :instrument "CB" :style (quote stacc) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/STACCATO/CB-STACC-F4-MF-1C-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 139 :chan 2 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7300 :vel 115 :dur 139 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "C#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 139 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-C5-FF-N-T29D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 139 :chan 6 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3204.35 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6400 :vel 40 :dur 279 :chan 1 :instrument "CB" :style (quote cre_dec) :pitch-name "E3" :dynamic "PPMFPP" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/CRESCENDO_TO_DECRESCENDO/CB-CRE_DEC-E3-PPMFPP-1C-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 279 :chan 2 :instrument "CB" :style (quote nonvib) :pitch-name "C3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/NON_VIBRATO/CB-NONVIB-C3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4600 :vel 85 :dur 279 :chan 3 :instrument "CB" :style (quote pont) :pitch-name "A#1" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-A#1-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 279 :chan 4 :instrument "FL" :style (quote play_and_sing) :pitch-name "D#4+C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING/FL-PLAY_AND_SING-D#4+C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 279 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 279 :chan 6 :instrument "FL" :style (quote flatt_ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-G#4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6100 :vel 85 :dur 139 :chan 1 :instrument "CB" :style (quote pont_tasto) :pitch-name "C#3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TO_SUL_TASTO/CB-PONT_TASTO-C#3-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6200 :vel 85 :dur 139 :chan 2 :instrument "CB" :style (quote tasto) :pitch-name "D3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SUL_TASTO/CB-TASTO-D3-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 139 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "C3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-C3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7300 :vel 115 :dur 139 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "C#Q4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-C#Q4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 139 :chan 5 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 139 :chan 6 :instrument "FL" :style (quote ord_flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-G4-MF-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3622.31 :duration 232.177 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7600 :vel 85 :dur 232 :chan 1 :instrument "CB" :style (quote stacc) :pitch-name "E4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/STACCATO/CB-STACC-E4-MF-1C-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 650 :chan 2 :instrument "CB" :style (quote nonvib) :pitch-name "C4" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/NON_VIBRATO/CB-NONVIB-C4-FF-2C-T17U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4700 :vel 115 :dur 232 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B1" :dynamic "FF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B1-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 232 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 232 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-C5-FF-N-T29D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 232 :chan 6 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 185.76 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 186 :chan 1 :instrument "CB" :style (quote ord) :pitch-name "C4" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/ORDINARIO/CB-ORD-C4-MF-2C-T13U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8100 :vel 85 :dur 186 :chan 3 :instrument "CB" :style (quote art_harm_trem) :pitch-name "A4" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/ARTIFICIAL_HARMONIC_TREMOLO/CB-ART_HARM_TREM-A4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 186 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7600 :vel 85 :dur 186 :chan 5 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "E4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-E4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8350 :vel 85 :dur 186 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "BQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4040.27 :duration 232.177 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 371 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "C3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-C3-MF-2C-T28U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 232 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 232 :chan 4 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "PP" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-PP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 232 :chan 5 :instrument "FL" :style (quote stacc) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 232 :chan 6 :instrument "FL" :style (quote trill_min_second) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4272.45 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 2 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 139 :chan 3 :instrument "CB" :style (quote art_harm_trem) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/STRINGS/CONTRABASS/ARTIFICIAL_HARMONIC_TREMOLO/CB-ART_HARM_TREM-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 139 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 139 :chan 5 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 139 :chan 6 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4411.77 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4700 :vel 115 :dur 279 :chan 1 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B1" :dynamic "FF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B1-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 279 :chan 2 :instrument "CB" :style (quote pizz_lv) :pitch-name "C4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_L_VIB/CB-PIZZ_LV-C4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 40 :dur 279 :chan 3 :instrument "CB" :style (quote cresc) :pitch-name "F4" :dynamic "PPFF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/CRESCENDO/CB-CRESC-F4-PPFF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 279 :chan 4 :instrument "FL" :style (quote ord_flatt) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-D#5-MF-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8350 :vel 85 :dur 279 :chan 5 :instrument "FL" :style (quote ord) :pitch-name "BQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 115 :dur 279 :chan 6 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "D#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-D#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 139.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 139 :chan 1 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 139 :chan 2 :instrument "CB" :style (quote nonvib) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/NON_VIBRATO/CB-NONVIB-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 139 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 139 :chan 5 :instrument "FL" :style (quote stacc) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 139 :chan 6 :instrument "FL" :style (quote flatt) :pitch-name "F#4" :dynamic "PP" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F#4-PP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4829.73 :duration 232.2 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 232 :chan 1 :instrument "CB" :style (quote tasto_trem) :pitch-name "C3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/SUL_TASTO_TREMOLO/CB-TASTO_TREM-C3-MF-1C-T13U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 232 :chan 2 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7950 :vel 115 :dur 232 :chan 4 :instrument "FL" :style (quote ord) :pitch-name "GQ4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-GQ4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 401 :chan 5 :instrument "FL" :style (quote ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 232 :chan 6 :instrument "FL" :style (quote trill_maj_second) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MAJOR_SECOND_UP/FL-TRILL_MAJ_SECOND-D#5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 5061.95 :duration 168.345 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6400 :vel 85 :dur 168 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "E3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-E3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 168 :chan 2 :instrument "CB" :style (quote trem_ord) :pitch-name "D4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO_TO_ORDINARIO/CB-TREM_ORD-D4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 85 :dur 168 :chan 3 :instrument "CB" :style (quote pont) :pitch-name "F2" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO/CB-PONT-F2-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 168 :chan 4 :instrument "FL" :style (quote flatt) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 168 :chan 6 :instrument "FL" :style (quote ord_aeol) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_AEOLIAN/FL-ORD_AEOL-D4-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (ensemble (list (quote orchestra) (quote cb) (quote cb) (quote cb) (quote fl) (quote fl) (quote fl)))) (make-instance (quote orch-output) :segments segs :ensemble ensemble))) (command-line "cd /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/scratch-WS/out-files/omorch-2023-11-08_11:42:33/ && /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/bin/orchestrate /home/andersvi/site/OM/ORCHIDEA/CSOL/africa.wav /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/scratch-WS/out-files/omorch-2023-11-08_11:42:33/africa.config.txt") (instruments (list "Cb" "Cb" "Cb" "Fl" "Fl" "Fl")) (config (load-textfile (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-08_11:42:33")) :device nil :host nil :name "africa.config" :type "txt") (quote textfile) "supersede" "text")) (onsets-threshold 0.3)) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config config)) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1031 567) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 485 101) (om-make-point 111 30) "Fl Gtr Cb Gtr Gtr" "\"Fl Gtr Cb Gtr Gtr\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 5 0 nil 0) (10 1 7 0 nil 0) (7 0 8 0 nil 0) (17 0 10 0 nil 0) (17 0 11 0 nil 0) (17 0 12 0 nil 0) (17 0 13 0 nil 0) (14 0 16 0 nil 0) (3 0 16 1 nil 0) (15 0 16 2 nil 0) (16 0 17 0 nil 0))) nil 7.04))
