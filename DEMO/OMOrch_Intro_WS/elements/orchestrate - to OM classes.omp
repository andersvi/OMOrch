; OM File Header - Saved 2023/11/16 13:18:34
; (7.04 :patc (om-make-point 51 141) (om-make-point 0 0) (om-make-point 1236 746) "" 183 0 "2023/11/01 11:27:42" "2023/11/16 12:46:54")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"../out-files/omorch-2023-11-16_11:20:37/africa.config.txt\"") (list (quote :sound) "#P\"../out-files/omorch-2023-11-16_11:20:37/africa.wav\"" "#P\"../../../../../CSOL/africa.wav\""))
(in-package :om)(load-lib-for (quote ("OMOrch")))(setf *om-current-persistent* (om-load-patch1 "orchestrate - to OM classes" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 297 42) (quote "Selecting 'dur' in mulit-seqs drop-down-list displays$Orchidea's support for (possibly) overlapping voices") nil (om-make-point 786 295) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 427 42) (quote "metadata from orchestration added to 'extra-obj-list' in poly's and multiseq's. $Selected in OMOrch preferences") nil (om-make-point 619 45) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 628 116) (om-make-point 332 163) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7700) (8800) (7500) (7600) (8400) (7150) (8000) (8400))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (115) (85) (85) (85) (85) (115) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (8000) (7700) (7800) (8400) (7700) (7800) (7700) (8000))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (3300) (6100) (6000) (5000) (3300) (5300))) :lonset (quote (0 511 1858 2786 3065 3483 4690 5230)) :ldur (quote ((511) (1347) (929) (279) (418) (1207) (540))) :lvel (quote ((85) (20) (115) (115) (85) (20) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000) (8700) (7800) (8400) (7200) (8700) (8400) (7800))) :lonset (quote (0 511 1207 1858 2786 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (697) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (7200) (7700) (5300) (7700) (7200) (7700))) :lonset (quote (0 511 1858 3065 3483 3854 4690 5230)) :ldur (quote ((511) (1347) (1207) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g^8) (quote g) (quote f) (quote g) (quote g^8)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 6 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 81/25 nil 1000 0 (om-make-point 1460 874) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 582 357) (om-make-point 382 128) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (6.0 1)) (1 (4.0 1)) (1 (1 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (500)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (143)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (500)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (4.0 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (6.0 1)) 1.0 (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (143)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((0 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((0 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((0 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((0 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((1 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((1 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((3 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((3 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((4 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 58/25 nil 1000 0 (om-make-point 1421 773) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 675 567) (om-make-point 210 88) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7700) (8800) (7500) (7600) (8400) (7150) (8000) (8400))) :lonset (quote (0 500 1250 1875 2800 3125 3500 3875 4667 5667)) :ldur (quote ((500) (750) (625) (925) (325) (375) (375) (792) (1000))) :lvel (quote ((85) (115) (85) (85) (85) (85) (115) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 787 444) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 818 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 192 42) (quote "orch-note metadata is forwarded$") "" (om-make-point 590 526) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 85 338) (om-make-point 109 72) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-16_11:20:37")) :device nil :host nil :name "africa" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE
" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 66 525) (om-make-point 238 112) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7500 6000 8000 7700)) :ldur (quote (500 500 500 500 500)) :lvel (quote (85 85 85 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8000 3300 8700 7200)) :ldur (quote (500 500 500 500 500)) :lvel (quote (115 85 0 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800 7700 7800)) :ldur (quote (500 500 500)) :lvel (quote (85 85 85)) :loffset (quote (0 0 0)) :lchan (quote (1 2 4))))) (load-port-info thechord (quote (nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500 7800 6100 8400 7700)) :ldur (quote (125 125 125 125 125)) :lvel (quote (85 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7600 8400 6000 7200)) :ldur (quote (200 200 200 200)) :lvel (quote (85 85 115 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 2 3 4))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7700 5000 5300)) :ldur (quote (375 375 375 375)) :lvel (quote (85 85 85 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 2 3 5))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150 7800 3300 8700 7700)) :ldur (quote (375 375 375 375 375)) :lvel (quote (115 85 0 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 7700 8400 7200)) :ldur (quote (125 125 125 125)) :lvel (quote (85 85 85 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 2 4 5))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 8000 5300 7800 7700)) :ldur (quote (333 333 333 333 333)) :lvel (quote (85 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "VOICE
") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 301/100 nil 1000 0 (om-make-point 858 647) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ
" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 337 515) (om-make-point 219 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 7500 6000 8000 7700) (7700 8000 3300 8700 7200) (8800 7700 7800) (7500 7800 6100 8400 7700) (7600 8400 6000 7200) (8400 7700 5000 5300) (7150 7800 3300 8700 7700) (8000 7700 8400 7200) (8400 8000 5300 7800 7700))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511 511 511 511 511) (697 697 1347 697 1347) (650 650 650) (929 929 929 929 1207) (279 279 279 697) (418 418 418 418) (372 372 1207 372 372) (836 836 836 836) (540 540 540 540 540))) :lvel (quote ((85 85 85 85 85) (115 85 0 85 85) (85 85 85) (85 85 115 85 85) (85 85 115 85) (85 85 85 85) (115 85 0 85 85) (85 85 85 85) (85 85 115 85 85))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 2 3 4 5) (1 2 3 4 5) (1 2 4) (1 2 3 4 5) (1 2 3 4) (1 2 3 5) (1 2 3 4 5) (1 2 4 5) (1 2 3 4 5))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "CHORD-SEQ
") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 267/100 nil 1000 0 (om-make-point 800 564) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 53 65) (om-make-point 149 65) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 871 565) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 258 166) (om-make-point 35 30) 0.7 "0.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source target object" "TARGET" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *orchidea-default-orchestration*)) (om-load-inputfun (quote input-funbox) "onsets threshold (ex. static = 2, dynamic = 0.1)" "ONSETS-THRESHOLD" 0.7))) (om-make-point 113 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCHESTRATION" (quote orchestration) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "target-sound" nil) (om-load-inputfun (quote input-funbox) "" "output-sound" nil) (om-load-inputfun (quote input-funbox) "" "orch-output" nil) (om-load-inputfun (quote input-funbox) "" "command-line" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "config-template" nil) (om-load-inputfun (quote input-funbox) "" "onsets-threshold" 1))) (om-make-point 252 215) (om-make-point 247 131) (let ((target-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (output-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-16_11:20:37")) :device nil :host nil :name "africa" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 511 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 511 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "C3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-C3-MF-2C-T28U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 697 :chan 1 :instrument "FL" :style (quote cre_dec) :pitch-name "C5" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-C5-PPMFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 697 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6400 :vel 115 :dur 697 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "E3" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-E3-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 697 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 697 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 1579 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 1579 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 650 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 650 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 929 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 929 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "C4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-C4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8600 :vel 85 :dur 929 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "D5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D5-MF-2C-T10D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 279 :chan 1 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-C5-FF-N-T29D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 279 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 115 :dur 697 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "C3" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-C3-FF-2C-T48U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 279 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "D#4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D#4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8100 :vel 85 :dur 279 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "A4_F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-A4_F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 418 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "D#5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-D#5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-1C-T12D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 1207 :chan 1 :instrument "FL" :style (quote stacc) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-C5-MF-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 85 :dur 372 :chan 1 :instrument "GTR" :style (quote tap_body) :pitch-name "N" :dynamic "MF" :instance 2 :sample-path "/PLUCKEDSTRINGS/GUITAR/TAP_ON_BODY/GTR-TAP_BODY-N-MF-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 372 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 372 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "C4_B3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_B3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1207 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6300 :vel 85 :dur 836 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "D#3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-D#3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 836 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 836 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4800 :vel 85 :dur 540 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "C2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-C2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote pont) :pitch-name "F2" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_PONTICELLO/GTR-PONT-F2-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (ensemble (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr)))) (make-instance (quote orch-output) :segments segs :ensemble ensemble))) (command-line "cd /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/DEMO/OMOrch_Intro_WS/out-files/omorch-2023-11-16_11:20:37/ && /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/bin/orchestrate /home/andersvi/site/OM/ORCHIDEA/CSOL/africa.wav /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/DEMO/OMOrch_Intro_WS/out-files/omorch-2023-11-16_11:20:37/africa.config.txt") (instruments (list "Fl" "Gtr" "Cb" "Gtr" "Gtr")) (config-template (load-textfile (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-16_11:20:37")) :device nil :host nil :name "africa.config" :type "txt") (quote textfile) "supersede" "text")) (onsets-threshold 0.7)) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config-template config-template)) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1031 567) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 212 93) (om-make-point 111 30) "Fl Gtr Cb Gtr Gtr" "\"Fl Gtr Cb Gtr Gtr\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 2 0 nil 0) (13 0 3 0 nil 0) (5 0 4 0 nil 0) (3 1 5 0 nil 0) (13 0 7 0 nil 0) (13 0 8 0 nil 0) (13 0 9 0 nil 0) (10 0 12 0 nil 0) (14 0 12 1 nil 0) (11 0 12 2 nil 0) (12 0 13 0 nil 0))) nil 7.04))
