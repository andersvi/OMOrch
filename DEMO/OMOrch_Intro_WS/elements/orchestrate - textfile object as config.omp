; OM File Header - Saved 2023/11/16 11:29:25
; (7.04 :patc (om-make-point 222 275) (om-make-point 0 0) (om-make-point 1020 839) "" 183 0 "2023/11/14 13:50:55" "2023/11/16 10:48:14")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../CSOL/africa.wav\"" "#P\"../out-files/omorch-2023-11-14_14:00:41/africa.wav\""))
(in-package :om)(load-lib-for (quote ("OMOrch")))(setf *om-current-persistent* (om-load-patch1 "orchestrate - textfile object as config" (quote ((let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 574 268) (om-make-point 214 72) (load-buffer-textfile (quote ("; -----------------------------" "; Orchidea - configuration file" "; -----------------------------" ";" "; (c) 2018-2020 Carmine E. Cella, HEM, Ircam" ";" "" "; This file contains the configuration parameters for assisted orchestration." "; Orchidea uses a mono-objective genetic algorithm for the optimization and" "; a graph structure to represent dynamic solutions." "" "; The lines starting with ';' are comments and are not evaluated; in the following" "; lines, some comments will explain each specific parameter." "" "; DATABASE AND ORCHESTRA -------------------------------------------------------" "" "; The parameter db_files contains the files of the features; please note that this is" "; a list and can contain different files, corresponding for example to different datasets." "; The only constraint is that each file should contain the same features (ex. mfcc)" "; The parameter sound_paths is the list of folders where the audio files are located;" "; please note that files must be WAV@44100, 16 bit." "; The naming convention for the files in the database is the following:" "; instrument-style-note-dynamics-other.wav" "; If your files are not named as specified, they will be tagged with 'N' for" "; each specific field. The structure of the folder is not important." "" "db_files 			/Users/Carmine/Projects/Media/Datasets/TinySOL.spectrum.db" "sound_paths			/Users/Carmine/Projects/Media/Datasets/TinySOL" "" "; This list specifies the instruments of the orchestra to be used; the names depend" "; on the database used. The character '|' in between two or more instruments means" "; that the instruments are played by a single player and are consider as doubles;" "; the algorithm will pick up either instrument depending on the optimization." "" ";;orchestra			Bn Bn Tbn Tbn BTb Cb Cb MulFl MulOb MulCl MulBn tt" ";orchestra			Cb MulFl MulOb MulCl MulBn tt tt tt tt" "orchestra			Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb" ";orchestra			Picc Fl Fl Ob Ob EH ClBb ClBb BClBb Bn Bn CBn Hn Hn Hn Hn TpC TpC TpC TpC TTbn TTbn TTbn BTb Vns Vns Vas Vcs Cb Cb" ";orchestra			Vn Vn Va Vc Cb" ";orchestra 	 		Bn Cb Hn Tbn+C|Tbn+H|Tbn+S BTb TpC+C|TpC+H|TpC+S" ";orchestra			Fl  Ob ClBb Bn" ";orchestra 	 		Bn Cb Hn Tbn+C|Tbn+H|Tbn+S BTb TpC+C|TpC+H|TpC+S MulFl|MulOb MulCl|MulBn tt" ";orchestra 	 		Tbn+C|Tbn+H|Tbn+S BTb TpC+C|TpC+H|TpC+S MulFl|MulOb MulCl|MulBn tt" ";orchestra 	 		TpC+C|TpC+H|TpC+S MulFl MulOb MulCl MulBn tt" ";orchestra			Acc Cb Bn MulBn tt BTb" "" "; These parameters are the filters for styles, dynamics and other tags; if the line" "; is commented there will be no filter applied." "" ";styles				pizz pizz-bartok pizz-lv pizz-partok pizz-sec" ";styles 				ord" ";styles	            mulpgbn mulvocl kn_ndle_edge kn_ndle_edge_drawn kn_ndle_mid pont-trem tasto-trem trem tymp_edge tymp_mid v_mh_edge v_mh_mid" ";dynamics			ppp pp p N" ";others				2c 4c" "" "; OPTIMIZATION -----------------------------------------------------------------" "" "; These are the parameter for the optimization. Normally, you don't need to change" "; them unless the solutions are not satisfactory." "" "; The population size and the number of epochs determines the width of the research;" "; usually the bigger the better, but the computation time can be long." "; Suggestion: For static targets this is often not a problem and using 500 for both is ok;" "; for dynamic targets probably using 100 for both (or 100 and 300 respectively)" "; can be more appropriate." "" "pop_size			200" "max_epochs			200" "" "; To determine the initial population for the optimization, Orchidea uses a method" "; called 'stochastic pursuit'. Generally speaking, the method tries to generate right" "; away some solutions that are close to the target. This is usually better but can" "; produce final solutions that are too homogeneous. Using 0, the initial population" "; is random; using 1 the pursuit will be not relaxed and the initial population will" "; be made of a single solution repeated (so it is not good). Increasing this value," "; for example to 3, means that the initial population will be made of a number of" "; different solutions that are somehow close to the target." "; Suggestion: use 0 if you are unsure, 3 or more if you understand this parameter." "" "pursuit				5" "" "; Cross-over rate and mutation rate have the usual meaning in genetic optimization." "; Generally speaking, you should not change cross-over rate and you should increase" "; mutation rate only to increase diversity of solutions, in spite of consistency." "; Suggestion: mutation rate should stay between 0.001 and 0.1" "" "xover_rate			0.8" "mutation_rate		0.01" "" "; Sparsity determines the freedom that the algorithm has to remove instruments of" "; the given orchestra from the solution. If sparsity is 0, each solution will use" "; all instruments; if this value increases, the probability of dropping an instrument" "; increases correspondingly." "; Suggestion: use 0.01 for general targets, 0.001 for symphonic targets, 0.1 for" "; single notes of instruments used as targets." "" "sparsity			0.001" "" "; The way Orchidea determines if a solution is close or not to the target is given" "; by an asymmetric function that considers differently cases in which a solution" "; found partials that are present in the target or partials that are not present." "; In the latter case, usually, the penalization should be stronger since we don't" "; want to hear partials that do not exist in the target." "; Suggestion: keep a ratio >10 between negative/positive, increasing negative penalization" "; if you notice that there are too many spurious partials and increasing positive" "; penalization if you notice that there are not enough partials." "" "positive_penalization .5" "negative_penalization 10" "" "; The hysteresis add joint optimization to match previous solutions in time in" "; dynamic orchestration." "; Suggestion: use 0 if you don't know about hysteretic orchestration, or 0 < something < 1" "; if you want to apply it" "" "hysteresis 0.1" "" "; The regularization (L1-like) sponsors sparse solutions." "; Suggestion: use 0 if you don't know about L1-regularization, or something >10" "; if you want to apply it (NB: the effect depends on the real amplitude of the features)" "" "regularization 0" "" "" "; TARGET -----------------------------------------------------------------------" "" "; The following parameters refer to the analysis of the target and subsequent" "; filtering of the search space. The window size (in samples) should be large" "; if you know that the target contains very low frequency (ex. A1)." "; The valid segmentation policies are: flux, powerflux, frames." "; Partials filtering works like that: if it is 0 there is no filtering and all" "; the sounds in the database are used. If it is between 0 < x < 1 than the database" "; is reduced by removing the sounds that does not correspond to the partials in the" "; target. Increasing this value produces a stricter selection and only strongest" "; partials (dynamically) are retained." "; Suggestion: use 0 for inharmonic or noisy sounds where timbre is more important" "; than pitch, and something between 0.1 < x < 0.3 if pitches are also important." "" "segmentation        flux" "partials_window		32768" "partials_filtering	.2" "" "; If, after the target analysis, there are still some pitches that are missing" "; you can add them here in standard notation (ex. A4, B#3, ...)" "extra_pitches		N" "" "; DYNAMIC ORCHESTRATION --------------------------------------------------------" "" "; These parameters refer to temporal orchestration. The current segmentation model" "; (very simple) uses thresholds and timegates on specific spectral features to" "; determine onsets. Timegates are specified in seconds, thresholds are absolute" "; values between 0 and 1." "; Suggestion: use threshold 0 to segment at any minimal spectral variation and" "; increase it to reduce the sensitivity. If threshold is > 1 than there will be" "; no onsets and target is considered static. The values for timegates depend" "; on the specific problem." "" "onsets_threshold 	.1" "onsets_timegate		.1" "" "; Other possible values are:" "; brahms .01 2" "; a_minor .1 .1" "; jarrett .03 .5" "; coq .1 .1" "; jazz piano .1 .1" "; toms diner .1 .05" "" "; EXPORT -----------------------------------------------------------------------" "" "; This final parameters are related to the exported solution. You can determine" "; how many of them are saved (please keep in mind that for temporal solutions" "; there is also the file connection.wav that represents the final orchestration)." "; T60 specifies the reverberation time and you can control the dry/wet ratio with" "; respective parameters." "" "export_solutions	0" "t60					2.8" "dry_wet				.8 .4" "" "; eof" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 240 28) (quote "input: Target, ensemble, onsets-threshold") "" (om-make-point 261 194) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 539 571) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 7900 4600 7700 7200) (8000 8700 3300 5900 6500) (7800 7700 7200 8000) (8400 5300 7800 8600) (7700 7200 5900 8400 8700) (8400 8000 5300 7800 8400) (7700 8400 7100) (8700 7700 3300 6000 8400) (7200 7500 7800 8000))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511 511 511 511 511) (697 697 1347 697 697) (650 1579 650 650) (929 929 929 929) (279 279 279 279 279) (418 418 789 789 418) (372 372 372) (836 1376 836 836 836) (540 540 540 540))) :lvel (quote ((85 85 115 85 85) (115 85 0 85 85) (115 85 85 85) (85 115 85 85) (85 85 115 85 85) (100 85 115 85 85) (85 85 55) (85 85 0 85 85) (115 85 85 85))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil) (nil nil nil nil nil) (nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCH-OUTPUT" (quote orch-output) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "ensemble" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "segments" nil))) (om-make-point 520 442) (om-make-point 194 74) (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 511 :chan 1 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 511 :chan 2 :instrument "GTR" :style (quote gl_fst) :pitch-name "G4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-G4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4600 :vel 115 :dur 511 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "A#1" :dynamic "FF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-A#1-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 511 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 511 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 115 :dur 697 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 697 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "D#5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D#5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 1347 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 85 :dur 697 :chan 4 :instrument "GTR" :style (quote dedillo) :pitch-name "B2" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/DEDILLO/GTR-DEDILLO-B2-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 697 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 650 :chan 1 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1579 :chan 2 :instrument "GTR" :style (quote gl_fst) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 650 :chan 4 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 929 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 929 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 929 :chan 4 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8600 :vel 85 :dur 929 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "D5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D5-MF-2C-T10D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 279 :chan 1 :instrument "FL" :style (quote ord_flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-F4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 279 :chan 2 :instrument "GTR" :style (quote slide) :pitch-name "C4_D4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_D4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 279 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 279 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 279 :chan 5 :instrument "GTR" :style (quote ord_hi_reg) :pitch-name "D#5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO_HIGH_REGISTER/GTR-ORD_HI_REG-D#5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 100 :dur 418 :chan 1 :instrument "FL" :style (quote sfz) :pitch-name "C5" :dynamic "FP" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-C5-FP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 418 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 789 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 789 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 418 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 372 :chan 1 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 372 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 55 :dur 372 :chan 5 :instrument "GTR" :style (quote harm_fngr) :pitch-name "B3" :dynamic "P" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/HARMONIC_FINGERING/GTR-HARM_FNGR-B3-P-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 836 :chan 1 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1376 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 836 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 836 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "C3" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C3-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 836 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 540 :chan 3 :instrument "CB" :style (quote crush_ord) :pitch-name "D#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/CRUSHED_TO_ORDINARIO/CB-CRUSH_ORD-D#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 540 :chan 4 :instrument "GTR" :style (quote pizz) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (ensemble (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr)))) (make-instance (quote orch-output) :segments segs :ensemble ensemble)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 117 619) (om-make-point 120 138) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (8400) (7150) (8400))) :lonset (quote (0 1207 3065 3483 5230)) :ldur (quote ((1207) (1858) (418) (1747))) :lvel (quote ((100) (100) (115) (85))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (6500) (8100) (7800))) :lonset (quote (0 1207 3065 3483 5230)) :ldur (quote ((1207) (1858) (418) (1747))) :lvel (quote ((85) (85) (55) (85))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3300) (6300) (6000) (4500))) :lonset (quote (0 1207 3065 3483 5230)) :ldur (quote ((1207) (1858) (418) (1747))) :lvel (quote ((0) (115) (85) (115))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_one_sec" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_one_sec" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7700) (7200))) :lonset (quote (0 3065 3483 5230)) :ldur (quote ((3065) (418) (1747))) :lvel (quote ((85) (85) (85))) :loffset (quote ((0) (0) (0))) :lchan (quote ((4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (7900) (7800) (7700))) :lonset (quote (0 1207 3065 3483 5230)) :ldur (quote ((1207) (1858) (418) (1747))) :lvel (quote ((85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil)) ((nil) (nil) (nil)) ((nil) (nil) (nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_one_sec" :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_one_sec" :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 702 679) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 5 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 489 42) (quote "TODO: make all of 'orchestrate' s various parameters and configs available at user-level$") "" (om-make-point 263 219) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 299 55) (om-make-point 111 30) "Fl Gtr Cb Gtr Gtr" "\"Fl Gtr Cb Gtr Gtr\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCHESTRATION" (quote orchestration) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "target-sound" nil) (om-load-inputfun (quote input-funbox) "" "output-sound" nil) (om-load-inputfun (quote input-funbox) "" "orch-output" nil) (om-load-inputfun (quote input-funbox) "" "command-line" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "config-template" nil) (om-load-inputfun (quote input-funbox) "" "onsets-threshold" 1))) (om-make-point 198 280) (om-make-point 260 141) (let ((target-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (output-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "omorch-2023-11-14_14:00:41")) :device :unspecific :host :unspecific :name "africa" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 1207.41 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 100 :dur 1207 :chan 1 :instrument "FL" :style (quote sfz) :pitch-name "D#4" :dynamic "FP" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-D#4-FP-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1207 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 1207 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 3065 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "C4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 1207 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 1857.57 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 100 :dur 1858 :chan 1 :instrument "FL" :style (quote sfz) :pitch-name "C5" :dynamic "FP" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-C5-FP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 1858 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6300 :vel 115 :dur 1858 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "D#3" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-D#3-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 1858 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "G4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 418 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8100 :vel 55 :dur 418 :chan 2 :instrument "GTR" :style (quote harm_fngr) :pitch-name "A4" :dynamic "P" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/HARMONIC_FINGERING/GTR-HARM_FNGR-A4-P-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 418 :chan 3 :instrument "CB" :style (quote lasting_one_sec) :pitch-name "C3" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/NOTE_LASTING/CB-LASTING_ONE_SEC-C3-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 418 :chan 4 :instrument "GTR" :style (quote gl_fst) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 418 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-4C-T10D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 1747.32 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 1747 :chan 1 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 1747 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4500 :vel 115 :dur 1747 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "A1" :dynamic "FF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-A1-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 1747 :chan 4 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1747 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-4C-T11D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (ensemble (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr)))) (make-instance (quote orch-output) :segments segs :ensemble ensemble))) (command-line "cd /home/andersvi/site/OM/ORCHIDEA/test-orkide/out-files/omorch-2023-11-14_14:00:41/ && /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/bin/orchestrate /home/andersvi/site/OM/ORCHIDEA/CSOL/africa.wav /home/andersvi/site/OM/ORCHIDEA/test-orkide/out-files/omorch-2023-11-14_14:00:41/africa.config.txt") (instruments (list "Fl" "Gtr" "Cb" "Gtr" "Gtr")) (config-template nil) (onsets-threshold 1)) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config-template config-template)) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1031 567) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source target object" "TARGET" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *orchidea-default-orchestration*)) (om-load-inputfun (quote input-funbox) "onsets threshold (ex. static = 2, dynamic = 0.1)" "ONSETS-THRESHOLD" 0.7))) (om-make-point 198 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 371 98) (om-make-point 41 30) 0.87 "0.87" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 131 57) (om-make-point 149 65) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 871 565) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (7 0 3 0 nil 0) (7 0 4 0 nil 0) (8 0 7 0 nil 0) (0 0 7 6 nil 0) (10 0 8 0 nil 0) (6 0 8 1 nil 0) (9 0 8 2 nil 0))) nil 7.04))
