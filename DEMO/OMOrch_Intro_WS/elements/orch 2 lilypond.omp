; OM File Header - Saved 2023/11/16 13:26:13
; (7.04 :patc (om-make-point 286 314) (om-make-point 0 0) (om-make-point 1464 919) "" 183 0 "2023/11/16 13:23:41" "2023/11/16 13:26:07")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../../CSOL/africa.wav\""))
(in-package :om)(load-lib-for (quote ("omlily" "OMOrch")))(setf *om-current-persistent* (om-load-patch1 "orch 2 lilypond" (quote ((let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 344 268) (om-make-point 277 163) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (1.0 4)) (1 (4.0 1)) (1 (1.0 3 3 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (800)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (6.0 1)) (1 (4.0 1)) (1 (1.0 6 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (500)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (143)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (200)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 6 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((0 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((2 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((3 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((4 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1510 947) 0 1000 nil 31/20 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 5 4 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE
Fl
Gtr
Cb
Gtr
Gtr" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 90 267) (om-make-point 215 148) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7900 4600 7700 7200)) :ldur (quote (500 500 500 500 500)) :lvel (quote (85 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 8700 3300 5900 6500)) :ldur (quote (500 500 500 500 500)) :lvel (quote (115 85 0 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 7700 7200 8000)) :ldur (quote (500 500 500 500)) :lvel (quote (115 85 85 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 2 4 5))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 5300 7800 8600)) :ldur (quote (125 125 125 125)) :lvel (quote (85 115 85 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7200 5900 8400 8700)) :ldur (quote (200 200 200 200 200)) :lvel (quote (85 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 8000 5300 7800 8400)) :ldur (quote (375 375 375 375 375)) :lvel (quote (100 85 115 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 8400 7100)) :ldur (quote (375 375 375)) :lvel (quote (85 85 55)) :loffset (quote (0 0 0)) :lchan (quote (1 2 5))))) (load-port-info thechord (quote (nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700 7700 3300 6000 8400)) :ldur (quote (125 125 125 125 125)) :lvel (quote (85 85 0 85 85)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 2 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200 7500 7800 8000)) :ldur (quote (333 333 333 333)) :lvel (quote (115 85 85 85)) :loffset (quote (0 0 0 0)) :lchan (quote (1 3 4 5))))) (load-port-info thechord (quote (nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "VOICE
Fl
Gtr
Cb
Gtr
Gtr") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 810 626) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 951 234) (om-make-point 120 138) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8000) (7800) (8400) (7700) (8400) (7700) (8700) (7200))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (115) (115) (85) (85) (100) (85) (85) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (8700) (7700) (7200) (8000) (8400) (7700))) :lonset (quote (0 511 1207 2786 3065 3483 3854 5230)) :ldur (quote ((511) (697) (1579) (279) (418) (372) (1376))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600) (3300) (5300) (5900) (5300) (3300) (7500))) :lonset (quote (0 511 1858 2786 3065 3854 4690 5230)) :ldur (quote ((511) (1347) (929) (279) (789) (836) (540))) :lvel (quote ((115) (20) (115) (115) (115) (20) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7700) (5900) (7200) (7800) (8400) (7800) (6000) (7800))) :lonset (quote (0 511 1207 1858 2786 3065 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (789) (836) (540))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6500) (8000) (8600) (8700) (8400) (7100) (8400) (8000))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (85) (85) (55) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "crush_ord" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "harm_fngr" :from-file t))) ((4 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1580 995) 0 1000 nil 157/50 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 4 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 728 266) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 7900 4600 7700 7200) (8000 8700 3300 5900 6500) (7800 7700 7200 8000) (8400 5300 7800 8600) (7700 7200 5900 8400 8700) (8400 8000 5300 7800 8400) (7700 8400 7100) (8700 7700 3300 6000 8400) (7200 7500 7800 8000))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511 511 511 511 511) (697 697 1347 697 697) (650 1579 650 650) (929 929 929 929) (279 279 279 279 279) (418 418 789 789 418) (372 372 372) (836 1376 836 836 836) (540 540 540 540))) :lvel (quote ((85 85 115 85 85) (115 85 0 85 85) (115 85 85 85) (85 115 85 85) (85 85 115 85 85) (100 85 115 85 85) (85 85 55) (85 85 0 85 85) (115 85 85 85))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 2 3 4 5) (1 2 3 4 5) (1 2 4 5) (1 3 4 5) (1 2 3 4 5) (1 2 3 4 5) (1 2 5) (1 2 3 4 5) (1 3 4 5))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil nil) (nil nil nil nil nil) (nil nil nil) (nil nil nil nil nil) (nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 818 510) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCHESTRATION" (quote orchestration) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "target-sound" nil) (om-load-inputfun (quote input-funbox) "" "output-sound" nil) (om-load-inputfun (quote input-funbox) "" "orch-output" nil) (om-load-inputfun (quote input-funbox) "" "command-line" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "config" nil) (om-load-inputfun (quote input-funbox) "" "onsets-threshold" 1))) (om-make-point 134 32) (om-make-point 182 146) (let ((target-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (output-sound (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj)) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 511 :chan 1 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 511 :chan 2 :instrument "GTR" :style (quote gl_fst) :pitch-name "G4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-G4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4600 :vel 115 :dur 511 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "A#1" :dynamic "FF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-A#1-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 511 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 511 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 115 :dur 697 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 697 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "D#5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D#5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 1347 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 85 :dur 697 :chan 4 :instrument "GTR" :style (quote dedillo) :pitch-name "B2" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/DEDILLO/GTR-DEDILLO-B2-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 697 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 115 :dur 650 :chan 1 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1579 :chan 2 :instrument "GTR" :style (quote gl_fst) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 650 :chan 4 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 929 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 929 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 929 :chan 4 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8600 :vel 85 :dur 929 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "D5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D5-MF-2C-T10D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 279 :chan 1 :instrument "FL" :style (quote ord_flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-F4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 279 :chan 2 :instrument "GTR" :style (quote slide) :pitch-name "C4_D4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_D4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 279 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 279 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 279 :chan 5 :instrument "GTR" :style (quote ord_hi_reg) :pitch-name "D#5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO_HIGH_REGISTER/GTR-ORD_HI_REG-D#5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 100 :dur 418 :chan 1 :instrument "FL" :style (quote sfz) :pitch-name "C5" :dynamic "FP" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-C5-FP-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 418 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 789 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 789 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 418 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 372 :chan 1 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 372 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 55 :dur 372 :chan 5 :instrument "GTR" :style (quote harm_fngr) :pitch-name "B3" :dynamic "P" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/HARMONIC_FINGERING/GTR-HARM_FNGR-B3-P-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 836 :chan 1 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1376 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 836 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 836 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "C3" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C3-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 836 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 540 :chan 3 :instrument "CB" :style (quote crush_ord) :pitch-name "D#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/CRUSHED_TO_ORDINARIO/CB-CRUSH_ORD-D#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 540 :chan 4 :instrument "GTR" :style (quote pizz) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (ensemble (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr)))) (make-instance (quote orch-output) :segments segs :ensemble ensemble))) (command-line "cd /home/andersvi/site/OM/ORCHIDEA/test-orkide/out-files/omorch-2023-11-08_10:48:07/ && /home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/bin/orchestrate /home/andersvi/site/OM/ORCHIDEA/CSOL/africa.wav /home/andersvi/site/OM/ORCHIDEA/test-orkide/out-files/omorch-2023-11-08_10:48:07/africa.config.txt") (instruments (list "Fl" "Gtr" "Cb" "Gtr" "Gtr")) (config-template nil) (onsets-threshold 1)) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config-template config-template)) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1031 567) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->LILY" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 338 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 186 112) (quote "chord-seq and multi-seq does$not yet show any meta-data$with omlily$$ Needs rewrite of parts of omlily$ - esp. #'staff-data$") "" (om-make-point 665 474) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->LILY" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 101 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->LILY" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 991 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->LILY" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (quote t)))) (om-make-point 736 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 343 70) (quote "Output from OMOrch to LilyPond$$LilyPond: typesetting the required metadata (styles, per-note$dynamic) requires an up-to-date version of Karims 'omlily'-lib") "" (om-make-point 395 72) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0) (1 0 7 0 nil 0) (2 0 8 0 nil 0) (3 0 9 0 nil 0))) nil 7.04))
