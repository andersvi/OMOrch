; OM File Header - Saved 2023/11/23 11:00:44
; (7.04 :patc (om-make-point 344 22) (om-make-point 0 0) (om-make-point 1034 588) "" 183 0 "2023/11/23 10:51:30" "2023/11/23 10:56:58")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../CSOL/africa.wav\"" "#P\"../../../OMOrch/DEMO/OMOrch_Intro_WS/out-files/omorch/africa-solution.wav\"") (list (quote :text) "#P\"../../../OMOrch/DEMO/OMOrch_Intro_WS/out-files/orch.config\""))
(in-package :om)(load-lib-for (quote ("OMOrch")))(setf *om-current-persistent* (om-load-patch1 "02 orch-config" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "  append" "append") (list "> supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 684 258) (om-make-point 244 86) (load-textfile (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "OM_ORCHIDEA_LIB" "OMOrch" "DEMO" "OMOrch_Intro_WS" "out-files")) :device nil :host nil :name "orch" :type "config") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 562 111) nil (list (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "OM_ORCHIDEA_LIB" "BACKUPS" "OMOrch_Scratch_WS" "out-files" "omorch")) :device nil :host nil :name "africa.config" :type "txt")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCH-CONFIG 2" (quote orch-config) (quote ((om-load-inputfun (quote input-funbox) "textfile, pathname or string" "SELF" (quote *orch-default-config-path*)))) (om-make-point 579 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 42 257) (om-make-point 149 65) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale onset measure)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 871 565) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil nil nil)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "target sound object" "TARGET" nil) (om-load-inputfun (quote input-funbox) "an orch-config" "CONFIG" nil))) (om-make-point 178 411) nil (list (let ((target-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "CSOL")) :device nil :host nil :name "africa" :type "wav") 0 0.11 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.wav") (set-tonalite newobj nil) newobj)) (output-sound (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "OM_ORCHIDEA_LIB" "OMOrch" "DEMO" "OMOrch_Intro_WS" "out-files" "omorch")) :device nil :host nil :name "africa-solution" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa-solution.wav") (set-tonalite newobj nil) newobj)) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 511 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-FF-N-T19D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6100 :vel 115 :dur 511 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "C#3" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-C#3-FF-1C-T21U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-1C-T12D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 511 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 115 :dur 697 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "G#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 697 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "FF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 115 :dur 697 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "C3" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-C3-FF-1C-T18U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6300 :vel 115 :dur 697 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "D#3" :dynamic "FF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D#3-FF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 697 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 650 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4100 :vel 85 :dur 650 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "F1" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-F1-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 85 :dur 650 :chan 1 :instrument "GTR" :style (quote dedillo) :pitch-name "F2" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/DEDILLO/GTR-DEDILLO-F2-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 650 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 1207 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 929 :chan 1 :instrument "GTR" :style (quote pizz_bartok) :pitch-name "C4" :dynamic "FF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO_BARTOK/GTR-PIZZ_BARTOK-C4-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 929 :chan 1 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6200 :vel 85 :dur 1207 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "D3_C3" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-D3_C3-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 929 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 279 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4300 :vel 85 :dur 279 :chan 1 :instrument "CB" :style (quote pont_trem) :pitch-name "G1" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G1-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 279 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 418 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-4C-T11D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 115 :dur 418 :chan 1 :instrument "CB" :style (quote pizz_bartok) :pitch-name "C3" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-C3-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote pont) :pitch-name "B2" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_PONTICELLO/GTR-PONT-B2-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 418 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "C5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-C5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 372 :chan 1 :instrument "FL" :style (quote cre_dec) :pitch-name "C5" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-C5-PPMFPP-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 372 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "G#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-G#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 115 :dur 372 :chan 1 :instrument "CB" :style (quote pizz_bartok) :pitch-name "D#4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-D#4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 372 :chan 1 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 372 :chan 1 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7750 :vel 85 :dur 836 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "FQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-FQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 836 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 1376 :chan 1 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 836 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "D#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 836 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 540 :chan 1 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote tasto) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 540 :chan 1 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (instruments (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr)))) (make-instance (quote orch-output) :segments segs :instruments instruments))) (command-line "cd \"/home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/DEMO/OMOrch_Intro_WS/out-files/omorch/\" && \"/home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/resources/bin/orchestrate\" \"/home/andersvi/site/OM/ORCHIDEA/CSOL/africa.wav\" \"/home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/DEMO/OMOrch_Intro_WS/out-files/orch.config\"") (instruments (list "Fl" "Gtr" "Cb" "Gtr" "Gtr")) (config-file "/home/andersvi/site/OM/ORCHIDEA/OM_ORCHIDEA_LIB/OMOrch/DEMO/OMOrch_Intro_WS/out-files/orch.config")) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config-file config-file))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 325 320) (om-make-point 103 66) (load-textfile (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "OM_ORCHIDEA_LIB" "OMOrch" "DEMO" "OMOrch_Intro_WS" "out-files")) :device nil :host nil :name "orch" :type "config") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCH-CONFIG" (quote orch-config) (quote ((om-load-inputfun (quote input-funbox) "textfile, pathname or string" "SELF" (quote *orch-default-config-path*)))) (om-make-point 211 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 269 157) (om-make-point 103 72) (load-buffer-textfile (quote ("; ------------------------------------" "; Orchidea - configuration file STATIC" "; ------------------------------------" "" "db_files			/home/andersvi/site/OM/ORCHIDEA/_FullSOL2020_release/FullSOL2020.spectrum.db" "sound_paths			/home/andersvi/site/OM/ORCHIDEA/_FullSOL2020_release/FullSOL2020/" "" "orchestra			Fl Gtr Cb Gtr Gtr" ";styles" "" "pop_size			500" "max_epochs			500" "" "pursuit				0" "" "xover_rate			0.8" "mutation_rate			0.01" "" "sparsity			0.001" "" "positive_penalization		.5" "negative_penalization		10" "" "hysteresis 0" "" "regularization 0" "" "segmentation			flux" "partials_window			32768" "partials_filtering		.2" "" "" "onsets_threshold		0.7" "onsets_timegate			.1" "" "export_solutions		10" "t60				2.8" "dry_wet				.8 .4" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0))) nil 7.04))
