; OM File Header - Saved 2023/11/23 10:59:02
; (7.04 :patc (om-make-point 22 191) (om-make-point 0 0) (om-make-point 1430 742) "" 183 0 "2023/11/03 19:57:54" "2023/11/23 10:34:02")
; End File Header
(in-package :om)(load-lib-for (quote ("OMOrch")))(setf *om-current-persistent* (om-load-patch1 "04 orchestrate import external solution-files" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 219 42) (quote "convenience method$allow loading direct from file-on-disk?") "" (om-make-point 751 198) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 776 413) (om-make-point 176 100) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400 5300 3300 7800 7800 8000 8700 7200)) :ldur (quote (500 500 500 500 500 500 500 500)) :lvel (quote (85 85 0 85 85 115 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6000 8000 8700 7700 7150 7100)) :ldur (quote (500 500 500 500 500 500 500)) :lvel (quote (85 115 85 85 85 115 85)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6500 4600 7800 7200 7500 8350 7750)) :ldur (quote (500 500 500 500 500 500 500 500)) :lvel (quote (85 85 115 85 85 85 85 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7400 5600 7200 7800 6100 8600 7700)) :ldur (quote (125 125 125 125 125 125 125 125)) :lvel (quote (85 85 85 85 85 85 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 8400 6500 8000 8000 7500)) :ldur (quote (200 200 200 200 200 200)) :lvel (quote (85 40 85 85 55 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 2 3 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 6800 3300 7100 6000 7100 7200 7900)) :ldur (quote (375 375 375 375 375 375 375 375)) :lvel (quote (115 85 0 40 85 85 85 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6700 5900 7700 7200 8400 7900 8700)) :ldur (quote (375 375 375 375 375 375 375 375)) :lvel (quote (85 85 115 115 85 115 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150 8700 5300 7800 7700 7800 7500 8400)) :ldur (quote (125 125 125 125 125 125 125 125)) :lvel (quote (115 85 115 85 85 40 100 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 5 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7800 7200 7900 8000 7200 8700)) :ldur (quote (333 333 333 333 333 333 333)) :lvel (quote (85 85 115 85 85 115 85)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 2 3 4 6 7 8))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "VOICE
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1024 344) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 621 42) (quote "Load a \"xxx.orchestration.txt\" file from disk somewhere, e.g. from an earlier run, output from other orch''' tools etc $Sometimes called a \"connection\"-file?") "" (om-make-point 219 69) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 383 492) (om-make-point 266 242) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) (1 (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (200)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (500)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3300)) :ldur (quote (375)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (3))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) 1.0 (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (4))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) 1.0 (1 (1.0 3 3 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (5))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800)) :ldur (quote (125)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (6))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8350)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8600)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000)) :ldur (quote (200)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (333)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (7))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (200)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8700)) :ldur (quote (333)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((0 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((0 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((0 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((1 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((1 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((1 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont" :from-file t))) ((1 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((1 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((2 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "bottle" :from-file t))) ((3 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((4 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((5 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((5 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tng_ram" :from-file t))) ((5 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((5 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "cre_dec" :from-file t))) ((5 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((6 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((6 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((6 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol" :from-file t))) ((6 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((6 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((6 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((6 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((6 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((7 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((7 0 2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0 2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((7 0 3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0 3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0 3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0 3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0 3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0 3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((7 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1239 641) 0 1000 nil 309/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 132 390) (om-make-point 176 100) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1)) (1 (2.0 4 1.0 1)) (1 (4.0 1)) (1 (1.0 3 3 1)))) ((3 4) ((1 (2.0 1)) (1 (2.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (8400 5300 3300 7800 7800 8000 8700 7200)) :ldur (quote (500 500 500 500 500 500 500 500)) :lvel (quote (85 85 0 85 85 115 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7800 6000 8000 8700 7700 7150 7100)) :ldur (quote (500 500 500 500 500 500 500)) :lvel (quote (85 115 85 85 85 115 85)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6500 4600 7800 7200 7500 8350 7750)) :ldur (quote (500 500 500 500 500 500 500 500)) :lvel (quote (85 85 115 85 85 85 85 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400 7400 5600 7200 7800 6100 8600 7700)) :ldur (quote (125 125 125 125 125 125 125 125)) :lvel (quote (85 85 85 85 85 85 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 8400 6500 8000 8000 7500)) :ldur (quote (200 200 200 200 200 200)) :lvel (quote (85 40 85 85 55 85)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 6800 3300 7100 6000 7100 7200 7900)) :ldur (quote (375 375 375 375 375 375 375 375)) :lvel (quote (115 85 0 40 85 85 85 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8000 6700 5900 7700 7200 8400 7900 8700)) :ldur (quote (375 375 375 375 375 375 375 375)) :lvel (quote (85 85 115 115 85 115 85 115)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7150 8700 5300 7800 7700 7800 7500 8400)) :ldur (quote (125 125 125 125 125 125 125 125)) :lvel (quote (115 85 115 85 85 40 100 85)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400 7800 7200 7900 8000 7200 8700)) :ldur (quote (333 333 333 333 333 333 333)) :lvel (quote (85 85 115 85 85 115 85)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (nil nil nil nil nil nil nil))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "VOICE
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1024 344) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 463 288) (om-make-point 210 199) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400) (8000) (8400) (7400) (7700) (8000) (7150) (7400))) :lonset (quote (0 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((1207) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (115) (85) (115) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (7800) (6500) (7400) (8400) (6800) (6700) (8700) (7800))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (40) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((2) (2) (2) (2) (2) (2) (2) (2) (2))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3300) (6000) (4600) (5600) (6500) (3300) (5900) (5300) (7200))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((20) (115) (115) (85) (85) (20) (115) (115) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((3) (3) (3) (3) (3) (3) (3) (3) (3))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Cb") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8000) (7800) (7200) (7100) (7700) (7800) (7900))) :lonset (quote (0 511 1207 1858 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (1207) (418) (372) (836) (540))) :lvel (quote ((85) (85) (85) (85) (40) (115) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((4) (4) (4) (4) (4) (4) (4) (4))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "bottle" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7800) (8700) (7200) (7800) (6000) (7200) (7700))) :lonset (quote (0 511 1207 1858 3065 3483 3854 5230)) :ldur (quote ((511) (697) (650) (1207) (418) (372) (1376))) :lvel (quote ((85) (85) (85) (85) (85) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((5) (5) (5) (5) (5) (5) (5))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Gtr") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000) (7700) (7500) (6100) (8000) (7100) (8400) (7800) (8000))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((115) (85) (85) (85) (85) (85) (115) (40) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((6) (6) (6) (6) (6) (6) (6) (6) (6))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tng_ram" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "cre_dec" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8700) (7150) (8350) (8600) (8000) (7200) (7900) (7500) (7200))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((85) (115) (85) (85) (55) (85) (85) (100) (115))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((7) (7) (7) (7) (7) (7) (7) (7) (7))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (7100) (7750) (7700) (7500) (7900) (8700) (8400) (8700))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((511) (697) (650) (929) (279) (418) (372) (836) (540))) :lvel (quote ((115) (85) (85) (115) (85) (85) (115) (85) (85))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((8) (8) (8) (8) (8) (8) (8) (8) (8))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl") (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((0 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((0 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing" :from-file t))) ((0 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((0 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((0 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((0 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "dedillo" :from-file t))) ((1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((1 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont" :from-file t))) ((1 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((1 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_hi_reg" :from-file t))) ((1 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((1 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((2 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pont_trem" :from-file t))) ((2 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ppp) :from-file t))) ((2 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "hit_body" :from-file t))) ((2 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((2 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trem" :from-file t))) ((2 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((2 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz_bartok" :from-file t))) ((3 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "bottle" :from-file t))) ((3 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((3 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((3 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((3 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((3 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((3 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((3 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "gl_fst" :from-file t))) ((4 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "pizz" :from-file t))) ((4 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tasto" :from-file t))) ((4 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((4 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "slide" :from-file t))) ((4 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((4 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((5 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord_flatt" :from-file t))) ((5 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "tng_ram" :from-file t))) ((5 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((5 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((5 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((5 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :pp) :from-file t))) ((5 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "cre_dec" :from-file t))) ((5 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((5 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((6 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t))) ((6 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((6 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_maj_second" :from-file t))) ((6 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :p) :from-file t))) ((6 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol" :from-file t))) ((6 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "play_and_sing_uni" :from-file t))) ((6 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((6 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((6 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :f) :from-file t))) ((6 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "sfz" :from-file t))) ((6 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((6 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "trill_min_second" :from-file t))) ((7 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "ord" :from-file t))) ((7 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "aeol_and_ord" :from-file t))) ((7 4 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 4 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "stacc" :from-file t))) ((7 5 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 5 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 6 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :ff) :from-file t))) ((7 6 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt" :from-file t))) ((7 7 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 7 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "lasting_half_sec" :from-file t))) ((7 8 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.4 :dynamics (quote :mf) :from-file t))) ((7 8 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax 0 :deltay -3 :thetext "flatt_ord" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1113 699) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2 2 2 2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 50 496) (om-make-point 193 142) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8400 5300 3300 7800 7800 8000 8700 7200) (7800 6000 8000 8700 7700 7150 7100) (8000 6500 4600 7800 7200 7500 8350 7750) (8400 7400 5600 7200 7800 6100 8600 7700) (7400 8400 6500 8000 8000 7500) (7700 6800 3300 7100 6000 7100 7200 7900) (8000 6700 5900 7700 7200 8400 7900 8700) (7150 8700 5300 7800 7700 7800 7500 8400) (7400 7800 7200 7900 8000 7200 8700))) :lonset (quote (0 511 1207 1858 2786 3065 3483 3854 4690 5230)) :ldur (quote ((1207 511 511 511 511 511 511 511) (697 697 697 697 697 697 697) (650 650 650 650 650 650 650 650) (929 929 929 1207 1207 929 929 929) (279 279 279 279 279 279) (418 418 418 418 418 418 418 418) (372 372 372 372 372 372 372 372) (836 836 836 836 1376 836 836 836) (540 540 540 540 540 540 540))) :lvel (quote ((85 85 0 85 85 115 85 115) (85 115 85 85 85 115 85) (85 85 115 85 85 85 85 85) (85 85 85 85 85 85 85 115) (85 40 85 85 55 85) (115 85 0 40 85 85 85 85) (85 85 115 115 85 115 85 115) (115 85 115 85 85 40 100 85) (85 85 115 85 85 115 85))) :loffset (quote ((0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil nil) (nil nil nil nil nil nil nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "CHORD-SEQ
Fl
Gtr
Cb
Gtr
Gtr
Fl
Fl
Fl") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCH-OUTPUT 4" (quote orch-output) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "ensemble" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "segments" nil))) (om-make-point 132 152) (om-make-point 180 103) (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 1207 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-MF-N-T17D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 85 :dur 511 :chan 2 :instrument "GTR" :style (quote dedillo) :pitch-name "F2" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/DEDILLO/GTR-DEDILLO-F2-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 511 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 511 :chan 4 :instrument "GTR" :style (quote bottle) :pitch-name "F#4" :dynamic "MF" :instance (quote n) :sample-path "/PLUCKEDSTRINGS/GUITAR/BOTTLENECK/GTR-BOTTLE-F#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 511 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 115 :dur 511 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 511 :chan 7 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 511 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 697 :chan 2 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 115 :dur 697 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "C3" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-C3-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 697 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 697 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "D#5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-D#5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 697 :chan 6 :instrument "FL" :style (quote ord_flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-F4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 697 :chan 7 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 85 :dur 697 :chan 8 :instrument "FL" :style (quote trill_min_second) :pitch-name "B3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-B3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 1 :instrument "FL" :style (quote ord_flatt) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-G#4-MF-N-R200D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 650 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4600 :vel 115 :dur 650 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "A#1" :dynamic "FF" :instance (quote |3C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-A#1-FF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 650 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 650 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_D4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_D4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 650 :chan 6 :instrument "FL" :style (quote ord_flatt) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-D#4-MF-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8350 :vel 85 :dur 650 :chan 7 :instrument "FL" :style (quote ord) :pitch-name "BQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7750 :vel 85 :dur 650 :chan 8 :instrument "FL" :style (quote ord) :pitch-name "FQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-FQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 929 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 929 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "D4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 929 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 1207 :chan 4 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 1207 :chan 5 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6100 :vel 85 :dur 929 :chan 6 :instrument "FL" :style (quote tng_ram) :pitch-name "C#3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TONGUE_RAM/FL-TNG_RAM-C#3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8600 :vel 85 :dur 929 :chan 7 :instrument "FL" :style (quote trill_maj_second) :pitch-name "D5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MAJOR_SECOND_UP/FL-TRILL_MAJ_SECOND-D5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 929 :chan 8 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 279 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-D4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 279 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "PP" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-PP-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 279 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "F3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-F3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 279 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 55 :dur 279 :chan 7 :instrument "FL" :style (quote aeol) :pitch-name "G#4" :dynamic "P" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN/FL-AEOL-G#4-P-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 279 :chan 8 :instrument "FL" :style (quote stacc) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 418 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6800 :vel 85 :dur 418 :chan 2 :instrument "GTR" :style (quote pont) :pitch-name "G#3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_PONTICELLO/GTR-PONT-G#3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 418 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 40 :dur 418 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "B3" :dynamic "PP" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-B3-PP-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 418 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "C3" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C3-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 85 :dur 418 :chan 6 :instrument "FL" :style (quote trill_min_second) :pitch-name "B3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-B3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 418 :chan 7 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 418 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 372 :chan 1 :instrument "FL" :style (quote play_and_sing) :pitch-name "G#4+C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING/FL-PLAY_AND_SING-G#4+C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6700 :vel 85 :dur 372 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "G3" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G3-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 372 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 372 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "FF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 372 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_E4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_E4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 372 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-FF-N-T19D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 372 :chan 7 :instrument "FL" :style (quote flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 115 :dur 372 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "D#5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-D#5-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 836 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 836 :chan 2 :instrument "GTR" :style (quote ord_hi_reg) :pitch-name "D#5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO_HIGH_REGISTER/GTR-ORD_HI_REG-D#5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 836 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 836 :chan 4 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1376 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-1C-T12D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 836 :chan 6 :instrument "FL" :style (quote cre_dec) :pitch-name "F#4" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-F#4-PPMFPP-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 100 :dur 836 :chan 7 :instrument "FL" :style (quote sfz) :pitch-name "D#4" :dynamic "F" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-D#4-F-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 836 :chan 8 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 540 :chan 1 :instrument "FL" :style (quote stacc) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 540 :chan 2 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "C4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-C4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 540 :chan 4 :instrument "GTR" :style (quote gl_fst) :pitch-name "G4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-G4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 6 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 7 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 540 :chan 8 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (instruments (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr) (quote fl) (quote fl) (quote fl)))) (make-instance (quote orch-output) :segments segs :instruments instruments)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 200 150) (om-make-point 0 0))) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILE-CHOOSER" (quote file-chooser) (quote nil) (om-make-point 65 68) nil (list (om-make-pathname :directory (quote (:absolute "home" "andersvi" "site" "OM" "ORCHIDEA" "OM_ORCHIDEA_LIB" "OMOrch" "DEMO" "OMOrch_Intro_WS" "out-files" "omorch")) :device nil :host nil :name "africa.orchestration" :type "txt")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "READ-ORCHESTRATION-FILE" (quote read-orchestration-file) (quote ((om-load-inputfun (quote input-funbox) "ORCH-FIL" "ORCH-FIL" nil))) (om-make-point 356 161) (om-make-point 114 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ORCHESTRATION 2" (quote orchestration) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "target-sound" nil) (om-load-inputfun (quote input-funbox) "" "output-sound" nil) (om-load-inputfun (quote input-funbox) "" "orch-output" nil) (om-load-inputfun (quote input-funbox) "" "command-line" nil) (om-load-inputfun (quote input-funbox) "" "instruments" nil) (om-load-inputfun (quote input-funbox) "" "config-template" nil) (om-load-inputfun (quote input-funbox) "" "onsets-threshold" 1))) (om-make-point 793 289) (om-make-point 118 57) (let ((target-sound nil) (output-sound nil) (orch-output (let ((segs (list (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 0 :duration 510.816 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 1207 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-MF-N-T17D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 85 :dur 511 :chan 2 :instrument "GTR" :style (quote dedillo) :pitch-name "F2" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/DEDILLO/GTR-DEDILLO-F2-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 511 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 2 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-2-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 511 :chan 4 :instrument "GTR" :style (quote bottle) :pitch-name "F#4" :dynamic "MF" :instance (quote n) :sample-path "/PLUCKEDSTRINGS/GUITAR/BOTTLENECK/GTR-BOTTLE-F#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 511 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 115 :dur 511 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 511 :chan 7 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 511 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 510.816 :duration 696.599 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 697 :chan 2 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 115 :dur 697 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "C3" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-C3-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 697 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G#4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 697 :chan 5 :instrument "GTR" :style (quote pizz) :pitch-name "D#5" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-D#5-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 697 :chan 6 :instrument "FL" :style (quote ord_flatt) :pitch-name "F4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-F4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 697 :chan 7 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 85 :dur 697 :chan 8 :instrument "FL" :style (quote trill_min_second) :pitch-name "B3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-B3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1207.41 :duration 650.159 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 650 :chan 1 :instrument "FL" :style (quote ord_flatt) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-G#4-MF-N-R200D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 650 :chan 2 :instrument "GTR" :style (quote pizz) :pitch-name "F3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/PIZZICATO/GTR-PIZZ-F3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 4600 :vel 115 :dur 650 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "A#1" :dynamic "FF" :instance (quote |3C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-A#1-FF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 650 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F#4" :dynamic "MF" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F#4-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 650 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_D4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_D4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 650 :chan 6 :instrument "FL" :style (quote ord_flatt) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_TO_FLATTERZUNGE/FL-ORD_FLATT-D#4-MF-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8350 :vel 85 :dur 650 :chan 7 :instrument "FL" :style (quote ord) :pitch-name "BQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7750 :vel 85 :dur 650 :chan 8 :instrument "FL" :style (quote ord) :pitch-name "FQ4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-FQ4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 1857.6 :duration 928.798 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 929 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 929 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "D4" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-D4-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5600 :vel 85 :dur 929 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "G#2" :dynamic "MF" :instance (quote |4C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-G#2-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 1207 :chan 4 :instrument "GTR" :style (quote slide) :pitch-name "C4_G#3" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_G#3-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 1207 :chan 5 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6100 :vel 85 :dur 929 :chan 6 :instrument "FL" :style (quote tng_ram) :pitch-name "C#3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TONGUE_RAM/FL-TNG_RAM-C#3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8600 :vel 85 :dur 929 :chan 7 :instrument "FL" :style (quote trill_maj_second) :pitch-name "D5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MAJOR_SECOND_UP/FL-TRILL_MAJ_SECOND-D5-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 929 :chan 8 :instrument "FL" :style (quote aeol_and_ord) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN_AND_ORDINARIO/FL-AEOL_AND_ORD-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 2786.39 :duration 278.617 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 279 :chan 1 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-D4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 40 :dur 279 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "C5" :dynamic "PP" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C5-PP-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6500 :vel 85 :dur 279 :chan 3 :instrument "CB" :style (quote pont_trem) :pitch-name "F3" :dynamic "MF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/SUL_PONTICELLO_TREMOLO/CB-PONT_TREM-F3-MF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 279 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 55 :dur 279 :chan 7 :instrument "FL" :style (quote aeol) :pitch-name "G#4" :dynamic "P" :instance (quote n) :sample-path "/WINDS/FLUTE/AEOLIAN/FL-AEOL-G#4-P-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 85 :dur 279 :chan 8 :instrument "FL" :style (quote stacc) :pitch-name "D#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3065.01 :duration 417.959 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 418 :chan 1 :instrument "FL" :style (quote flatt) :pitch-name "F4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-F4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6800 :vel 85 :dur 418 :chan 2 :instrument "GTR" :style (quote pont) :pitch-name "G#3" :dynamic "MF" :instance (quote |4C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_PONTICELLO/GTR-PONT-G#3-MF-4C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 3300 :vel 0 :dur 418 :chan 3 :instrument "CB" :style (quote hit_body) :pitch-name "N" :dynamic "N" :instance 5 :sample-path "/STRINGS/CONTRABASS/HIT_ON_BODY/CB-HIT_BODY-N-N-5-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 40 :dur 418 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "B3" :dynamic "PP" :instance (quote |2C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-B3-PP-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6000 :vel 85 :dur 418 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "C3" :dynamic "MF" :instance (quote |6C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-C3-MF-6C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7100 :vel 85 :dur 418 :chan 6 :instrument "FL" :style (quote trill_min_second) :pitch-name "B3" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/TRILL_MINOR_SECOND_UP/FL-TRILL_MIN_SECOND-B3-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 418 :chan 7 :instrument "FL" :style (quote play_and_sing_uni) :pitch-name "C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING_UNISON/FL-PLAY_AND_SING_UNI-C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 418 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3482.97 :duration 371.519 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 372 :chan 1 :instrument "FL" :style (quote play_and_sing) :pitch-name "G#4+C4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/PLAY_AND_SING/FL-PLAY_AND_SING-G#4+C4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 6700 :vel 85 :dur 372 :chan 2 :instrument "GTR" :style (quote ord) :pitch-name "G3" :dynamic "MF" :instance (quote |5C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-G3-MF-5C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5900 :vel 115 :dur 372 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "B2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-B2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 115 :dur 372 :chan 4 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "FF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 85 :dur 372 :chan 5 :instrument "GTR" :style (quote slide) :pitch-name "C4_E4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SLIDE/GTR-SLIDE-C4_E4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 115 :dur 372 :chan 6 :instrument "FL" :style (quote ord) :pitch-name "C5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO/FL-ORD-C5-FF-N-T19D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 372 :chan 7 :instrument "FL" :style (quote flatt) :pitch-name "G4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-G4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 115 :dur 372 :chan 8 :instrument "FL" :style (quote flatt) :pitch-name "D#5" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-D#5-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 3854.49 :duration 835.896 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7150 :vel 115 :dur 836 :chan 1 :instrument "FL" :style (quote ord) :pitch-name "BQ3" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/ORDINARIO_QUARTERTONES/FL-ORD-BQ3-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 836 :chan 2 :instrument "GTR" :style (quote ord_hi_reg) :pitch-name "D#5" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO_HIGH_REGISTER/GTR-ORD_HI_REG-D#5-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 5300 :vel 115 :dur 836 :chan 3 :instrument "CB" :style (quote trem) :pitch-name "F2" :dynamic "FF" :instance (quote |2C|) :sample-path "/STRINGS/CONTRABASS/TREMOLO/CB-TREM-F2-FF-2C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 836 :chan 4 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7700 :vel 85 :dur 1376 :chan 5 :instrument "GTR" :style (quote ord) :pitch-name "F4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/ORDINARIO/GTR-ORD-F4-MF-1C-T12D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 40 :dur 836 :chan 6 :instrument "FL" :style (quote cre_dec) :pitch-name "F#4" :dynamic "PPMFPP" :instance (quote n) :sample-path "/WINDS/FLUTE/CRESCENDO_TO_DECRESCENDO/FL-CRE_DEC-F#4-PPMFPP-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7500 :vel 100 :dur 836 :chan 7 :instrument "FL" :style (quote sfz) :pitch-name "D#4" :dynamic "F" :instance (quote n) :sample-path "/WINDS/FLUTE/SFORZATO/FL-SFZ-D#4-F-N-R100U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8400 :vel 85 :dur 836 :chan 8 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "C5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-C5-MF-N-T13D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)) (if (find-class (quote orch-segment) nil) (make-instance (quote orch-segment) :onset 4690.41 :duration 539.887 :solution (let ((notes (list (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7400 :vel 85 :dur 540 :chan 1 :instrument "FL" :style (quote stacc) :pitch-name "D4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/STACCATO/FL-STACC-D4-MF-N-R100D.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7800 :vel 85 :dur 540 :chan 2 :instrument "GTR" :style (quote tasto) :pitch-name "F#4" :dynamic "MF" :instance (quote |1C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/SUL_TASTO/GTR-TASTO-F#4-MF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 3 :instrument "CB" :style (quote pizz_bartok) :pitch-name "C4" :dynamic "FF" :instance (quote |1C|) :sample-path "/STRINGS/CONTRABASS/PIZZICATO_BARTOK/CB-PIZZ_BARTOK-C4-FF-1C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7900 :vel 85 :dur 540 :chan 4 :instrument "GTR" :style (quote gl_fst) :pitch-name "G4" :dynamic "MF" :instance (quote |3C|) :sample-path "/PLUCKEDSTRINGS/GUITAR/GLISSANDO/GTR-GL_FST-G4-MF-3C-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8000 :vel 85 :dur 540 :chan 6 :instrument "FL" :style (quote lasting_half_sec) :pitch-name "G#4" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/NOTE_LASTING/FL-LASTING_HALF_SEC-G#4-MF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 7200 :vel 115 :dur 540 :chan 7 :instrument "FL" :style (quote flatt) :pitch-name "C4" :dynamic "FF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE/FL-FLATT-C4-FF-N-N.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (if (find-class (quote orch-note) nil) (let ((newobj (make-instance (quote orch-note) :midic 8700 :vel 85 :dur 540 :chan 8 :instrument "FL" :style (quote flatt_ord) :pitch-name "D#5" :dynamic "MF" :instance (quote n) :sample-path "/WINDS/FLUTE/FLATTERZUNGE_TO_ORDINARIO/FL-FLATT_ORD-D#5-MF-N-R200U.WAV" :detune 0 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (make-instance (quote orch-solution) :notes notes)) :from-file t)))) (instruments (list (quote orchestra) (quote fl) (quote gtr) (quote cb) (quote gtr) (quote gtr) (quote fl) (quote fl) (quote fl)))) (make-instance (quote orch-output) :segments segs :instruments instruments))) (command-line nil) (instruments nil) (config-file nil)) (make-instance (quote orchestration) :target-sound target-sound :output-sound output-sound :orch-output orch-output :command-line command-line :instruments instruments :config-file config-file)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (7 0 3 0 nil 0) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (7 0 10 0 nil 0))) nil 7.04))
