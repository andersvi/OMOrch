; OM File Header - Saved 2021/04/02 17:57:34
; (6.18 :patc (om-make-point 344 51) (om-make-point 928 23) (om-make-point 864 1075) "" 183 0 "2021/04/02 17:02:16" "2021/04/02 17:57:34")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "dev patch" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 30 569) (om-make-point 370 182) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8490 8099 6400 6000 6000 9301 7905 7602 5698 6400 5200 6000 5698 5698) (9302 7201 7201 6898 6898 8100 7201 7201 8100 5999 5200 7201 7603 7201 5999 5696 7603) (7098 9504 7098 7098 5879 4380 7098 5184 5184 7098 6400 6400 5601 5106 5879 5879) (9504 5202 5099 6601 5598 5099 6401 4395) (7603 6400 8300 7097 8576 7603 7603 6400 7603 7097 5597 4396) (7116 7116 6403 5166 6403 5166 5680 6403 5648 7116 5166))) :lonset (quote (93 1022 1904 2090 2647 3344 4344)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 5 6 9 10 11 12 13 14 15 20 21 22 23) (1 5 6 7 8 9 11 12 13 14 15 16 17 18 20 21 22) (1 3 5 6 9 10 11 13 14 15 18 19 20 21 22 23) (1 7 9 11 13 20 21 22) (1 7 8 9 11 13 14 15 16 18 20 22) (1 2 7 9 10 13 14 18 20 22 23))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ORCH-OUTPUT->CHORD-SEQ" (quote orch-output->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "ORCH-OUTPUT" "ORCH-OUTPUT" nil))) (om-make-point 78 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 420 508) (om-make-point 370 182) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700 5700 6000 5200 6400 5700 7600 7900 9300 6000 6000 6400 8100 8500) (7600 5700 6000 7200 7600 7200 5200 6000 8100 7200 7200 8100 6900 6900 7200 7200 9300) (5900 5900 5100 5600 6400 6400 7100 5200 5200 7100 4400 5900 7100 7100 9500 7100) (4400 6400 5100 5600 6600 5100 5200 9500) (4400 5600 7100 7600 6400 7600 7600 8600 7100 8300 6400 7600) (5200 7100 5600 6400 5700 5200 6400 5200 6400 7100 7100))) :lonset (quote (93 1022 1904 2090 2647 3344 3404)) :ldur (quote ((929 1811 929 929 929 929 929 929 929 929 1811 929 929 929) (882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882 882) (743 186 186 186 743 1440 743 186 186 186 1440 186 1499 1499 186 743) (557 557 1254 557 557 557 557 557) (697 756 697 697 756 697 697 756 697 697 697 697) (60 60 60 60 60 60 60 60 60 60 60))) :lvel (quote ((115 115 40 40 40 115 40 40 40 40 85 40 40 85) (40 115 40 40 40 40 40 85 40 40 40 40 115 115 40 40 40) (40 40 85 115 40 40 40 85 85 40 85 40 40 40 40 40) (115 85 115 85 85 115 85 40) (85 40 85 40 40 40 40 40 40 40 40 85) (40 85 40 115 85 115 40 40 40 115 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((14 13 12 11 10 9 8 7 6 5 4 3 2 1) (19 18 17 16 14 12 11 10 9 8 7 6 5 3 2 1 15) (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 20) (24 23 22 21 19 18 17 16) (15 14 13 12 11 9 8 7 6 4 1 25) (15 13 12 10 9 8 6 5 4 1 16))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.18 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 403 215) (om-make-point 746 446) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MF-INFO->CHORD-SEQ" (quote mf-info->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 351 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ORCH-OUTPUT->MF-INFO" (quote orch-output->mf-info) (quote ((om-load-inputfun (quote input-funbox) "ORCH-OUTPUT" "ORCH-OUTPUT" nil))) (om-make-point 252 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 105 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "struct" (let ((copy (make-instance (quote omlistinstance) :name "struct" :icon 129))) (setf (instance copy) (list nil)) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2021/04/02 17:01:32" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 138 37) "struct" (om-make-point 117 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0))) nil 6.18))