; OM File Header - Saved 2021/04/02 21:37:03
; (6.18 :patc (om-make-point 102 67) (om-make-point 725 23) (om-make-point 896 1075) "" 183 0 "2021/03/27 11:11:45" "2021/04/02 21:36:20")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/A_minor_short-orch-48138267.wav\"" "#P\"../in-files/demo sounds/A_minor_short.wav\""))
(in-package :om)(load-lib-for (quote ("om-orchidea")))(setf *om-current-persistent* (om-load-patch1 "tutorial patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 214 333) (om-make-point 38 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source sound object" "SOUND" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *default-orchestration*)) (om-load-inputfun (quote input-funbox) "onsets threshold (ex. static = 2, dynamic = 0.1)" "ONSETS-THRESHOLD" 0.1) (om-load-inputfunmenu1 (quote input-funmenu) "score-format" "OUTPUT-FORMAT" (quote :chord-seq) (list (list "struct" (quote :struct)) (list "mf-info" (quote :mf-info)) (list "chord-seq" (quote :chord-seq)) (list "multi-seq" (quote :multi-seq)) (list "poly" (quote :poly)))))) (om-make-point 151 430) nil nil "&" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 339 87) (quote "The list of instruments corresponds to the naming of the sound files in the database, and it is case-sensitive. For that reason this argument must be a space-delimited string, not a list of symbols!") "" (om-make-point 406 320) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 47 37) (om-make-point 371 30) "/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db" "\"/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 269 796) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 338 555) (om-make-point 520 178) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8490 6400 6400 4799 6000 6000 7905 8099 8099 6400 6000 6400 5698 5698) (9302 9302 7201 8100 6898 6898 5200 9302 7201 5200 7201 7603 7201 5696 5999) (9503 9503 7098 7098 4395 5898 7098 6401 5598 7098 6401 6401 5598 5898 4395) (8300 6400 7602 5597 7097 8576 5098 6400 7097 5098 4396 6400))) :lonset (quote (93 1022 1904 2647 3647)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((1 5 6 7 9 10 11 13 14 15 20 21 22 23) (1 2 5 6 7 8 9 11 13 14 15 16 18 20 22) (1 2 5 6 9 10 11 13 14 15 18 19 20 22 23) (3 7 8 9 10 11 13 15 18 20 22 23))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 189 90) (om-make-point 790 436) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 143) (quote "evaluate this sequence object to get both the sound file and the chord-seq. (NB. this output is simplified, it does not regard note durations (where a note can extend across multiple segments)$$Also NB: the orchestrate method should have eval-once enabled so it doesn't do the calculation twice!") "" (om-make-point 369 802) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 146) (quote "this has to be evaluated before running orchestrate. You have to choose the db file which ends with '.spectrum.db', such as 'TinySOL.spectrum.db'$$restrictions: The folder containing the sound files must be adjacent to this database file.") "" (om-make-point 325 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 574 240) (om-make-point 98 30) "Vn Va Vc Cb" "\"Vn Va Vc Cb\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor_short-orch-48138267.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 60 602) (om-make-point 241 132) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "A_minor_short-orch-48138267" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor_short-orch-48138267.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 270 240) (om-make-point 235 77) "Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb" "\"Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor_short.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 11 180) (om-make-point 186 96) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "demo sounds")) :device :unspecific :host :unspecific :name "A_minor_short" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor_short.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-DB-FILE" (quote set-db-file) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 253 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 1 0 nil 0) (10 0 1 1 nil 0) (0 0 1 2 nil 0) (9 0 4 0 nil 0) (5 0 4 1 nil 0) (1 1 5 0 nil 0) (1 0 9 0 nil 0) (3 0 12 0 nil 0))) nil 6.18))
