; OM File Header - Saved 2021/04/01 8:01:42
; (6.18 :patc (om-make-point 102 67) (om-make-point 672 23) (om-make-point 896 1075) "" 183 0 "2021/03/27 11:11:45" "2021/04/01 8:01:32")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/A_minor-orch-82068583.wav\"" "#P\"../in-files/demo sounds/A_minor.wav\""))
(in-package :om)(load-lib-for (quote ("om-orchidea")))(setf *om-current-persistent* (om-load-patch1 "tutorial patch" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 313 143) (quote "The list of instruments corresponds to the naming of the sound files in the database, and it is case-sensitive. For that reason this argument must be a space-delimited string, not a list of symbols!") "" (om-make-point 421 321) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE 2" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source sound object" "SOUND" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *default-orchestration*)) (om-load-inputfunmenu1 (quote input-funmenu) "nil for status, t for dynamic" "DYNAMIC" (quote t) (list (list "static" nil) (list "dynamic" (quote t)))))) (om-make-point 162 390) (om-make-point 149 75) nil "&" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 47 37) (om-make-point 371 30) "/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db" "\"/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 269 796) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 338 592) (om-make-point 520 178) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9301 8099 6400 6000 6000 7602 8490 6400 5698 6400 6000 5200 5698 5698) (9302 7201 6898 6898 5200 6898 8100 7201 7201 7201 7603 5200 5999) (9503 9503 7098 7098 5898 4395 7098 5598 7098 6401 6401 5098 5598 4395 4395) (8576 8300 6400 6400 8300 4396 7602 7097 6400 5099 6400) (7201 8404 8099 4799 5998 6402 6898 8490 8099 6402 7201 6898 5694 5998 5694) (9301 8404 7603 6898 7200 5999 8490 6898 5999 5696 6401 5999 5201 5696) (7099 7402 6800 4698 7402 6800 6800 4999 4999 6800 5894 6200 4698 4698) (7402 6200 7402 7402 7402 8002 5893 8002 5893 6800 6200 5893 5000) (6401 6401 4794 7603 7603 8099 4794 6000 6401 7603 6401 5201) (7603 8100 7603 6401 8100 6000 6000 7603 6401 4794 6000 6000) (7802 7802 6200 7401 6200 6200 6200 7802 7802 6200 7401 7401 6200 6200 6200 6200 7802 7802) (7805 7402 7402 6199 4999 8100 7805 4999 4999 6199 6600 4999 4999) (9506 9506 7604 7098 8576 5202 7604 7789 7604 5202 5202 6199) (7098 6198 7604 8300 6800 6800 8004 4998 6401 6800) (7905 8100 7603 7603 6000 7603 8100 6401 4796 6000 4796 6000 4796 6000) (8100 9305 6401 6401 7603 4795 7603 8100 9305 5202 8100 6000 6000 4795 8100 5202) (7604 9305 6484 8100 5600 6100 6100 6801 4892) (8100 7604 7604 8100 4895 7604 6700 7604 7604 7604 7604 6700 4895 4895 6099) (7063 7905 8143 7603 8143 7905 4393 8143 5599 4898) (9506 7903 8099 8099 6700 6401 6401 7903 6485 6485 6401 6401 4895 5498 5279) (9304 7702 6200 7403 7403 6585 7702 4998 4998 4998 6585 4998 4998) (7401 6500 6500 7702 8098 7401 5299 8098 7702 4998 7401 8098 7702 6200 6200) (8100 7604 7604 5894 7604 8100 8100 5199 5199 7200 6401 5199 3994 3994) (7603 7201 7201 7201 7603 7201 6400 5894 6400 6400 5894 5999) (7402 8100 8100 6498 7402 7402 7402 4798 8100 6267 4798 6498 6498 6200 4798 4089 4089) (7402 6200 6200 6200 6200 5000 7402 8099 6498 6200) (7201 8100 8100 7201 7201 6400 8100 8100 5895 6400 6400 5197 5197 3995 3995) (7374 7201 8099 8099 7602 7201 5999 6400 7201 7602) (8300 7402 6399 5199 7402 5895 6800 6800) (9503 7097 6199 6800 5195 7097 8374 7400 8002 7400 6800 6199 6199 5894) (8100 5999 6401 5699 5699 6401 6401 5198 5699 5699 5699) (8100 6898 7602 6400))) :lonset (quote (93 1022 1904 2647 3437 4180 4969 5759 6502 7245 7988 8684 9474 10170 10913 11703 12678 13514 14211 14954 15697 16486 17229 18019 18808 19551 20387 21177 22012 22848 23824 24985 25985)) :ldur (quotelvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 5 6 9 10 11 12 13 14 15 20 21 22 23) (1 5 7 8 9 11 13 14 15 16 18 20 21) (1 2 5 6 9 10 11 13 15 18 19 20 21 22 23) (1 2 5 7 8 9 13 18 20 21 22) (1 3 5 7 9 10 11 12 13 15 16 20 21 22 23) (1 3 7 8 9 10 11 12 13 14 18 20 21 22) (5 6 7 9 10 11 12 13 15 16 20 21 22 23) (1 5 7 8 9 11 13 14 15 18 20 21 22) (5 6 7 9 10 13 14 15 18 20 22 23) (1 5 7 9 11 13 14 15 18 20 21 22) (1 2 5 6 7 8 9 11 13 14 15 16 18 19 20 21 22 23) (3 7 8 9 10 11 12 13 14 15 20 22 23) (1 2 5 6 9 10 11 13 14 15 20 21) (5 6 7 9 11 12 13 14 15 22) (1 5 6 9 10 11 12 13 14 15 20 21 22 23) (1 2 5 6 7 9 10 11 12 13 14 18 20 21 22 23) (1 5 9 10 13 15 18 20 22) (1 2 5 6 7 9 11 12 13 15 16 20 21 22 23) (1 3 5 7 9 13 15 18 22 23) (1 3 5 7 8 9 10 13 14 15 18 19 20 22 23) (1 3 5 7 8 11 13 14 15 20 21 22 23) (1 5 6 7 8 9 10 11 12 13 15 16 18 20 21) (5 7 8 9 10 11 13 14 15 16 20 21 22 23) (1 2 5 6 9 11 13 14 15 18 20 21) (1 2 5 6 7 8 9 10 11 13 14 15 18 20 21 22 23) (5 7 8 9 10 13 15 18 19 20) (1 5 6 7 8 9 10 13 15 18 19 20 21 22 23) (1 5 7 9 10 11 13 15 16 18) (1 5 6 7 8 9 10 13) (1 5 6 7 9 10 11 13 14 15 18 20 21 22) (7 9 10 13 15 18 19 20 21 22 23) (1 7 9 15))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 790 436) (om-make-point 189 90) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 143) (quote "evaluate this sequence object to get both the sound file and the chord-seq. (NB. this output is simplified, it does not regard note durations (where a note can extend across multiple segments)$$Also NB: the orchestrate method should have eval-once enabled so it doesn't do the calculation twice!") "" (om-make-point 369 802) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 146) (quote "this has to be evaluated before running orchestrate. You have to choose the db file which ends with '.spectrum.db', such as 'TinySOL.spectrum.db'$$restrictions: The folder containing the sound files must be adjacent to this database file.") "" (om-make-point 325 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 574 240) (om-make-point 105 30) "Fl Fl Fl Fl Fl Fl" "\"Fl Fl Fl Fl Fl Fl\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor-orch-82068583.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 60 602) (om-make-point 241 132) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "A_minor-orch-82068583" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor-orch-82068583.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 270 240) (om-make-point 235 77) "Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb" "\"Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 11 180) (om-make-point 186 96) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "demo sounds")) :device :unspecific :host :unspecific :name "A_minor" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-DB-FILE" (quote set-db-file) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 253 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (9 0 1 1 nil 0) (8 0 3 0 nil 0) (4 0 3 1 nil 0) (1 1 4 0 nil 0) (1 0 8 0 nil 0) (2 0 11 0 nil 0))) nil 6.18))
