; OM File Header - Saved 2021/03/30 9:26:07
; (6.18 :patc (om-make-point 102 67) (om-make-point 672 23) (om-make-point 896 1075) "" 183 0 "2021/03/27 11:11:45" "2021/03/30 9:23:55")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/A_minor-orch-96078700.wav\"" "#P\"../in-files/demo sounds/A_minor.wav\""))
(in-package :om)(load-lib-for (quote ("om-orchidea")))(setf *om-current-persistent* (om-load-patch1 "tutorial patch" (quote ((let ((box (om-load-boxcall (quote genfun) "ORCHESTRATE 2" (quote orchestrate) (quote ((om-load-inputfun (quote input-funbox) "source sound object" "SOUND" nil) (om-load-inputfun (quote input-funbox) "instrument abbreviations (space-delimited string)" "ORCHESTRATION" (quote *default-orchestration*)) (om-load-inputfunmenu1 (quote input-funmenu) "nil for status, t for dynamic" "DYNAMIC" (quote t) (list (list "static" nil) (list "dynamic" (quote t)))))) (om-make-point 162 390) (om-make-point 149 75) nil "&" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 47 37) (om-make-point 371 30) "/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db" "\"/Users/geof/Data/samples/orchidea-db/TinySOL.spectrum.db\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 269 796) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 338 592) (om-make-point 520 178) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9301 6400 8099 6000 6000 5698 6400 6400 6000 5200 5698 5698) (7603 9302 7201 6898 7201 8100 6898 6898 7201 5200 5200 7603 5999 5696 6898) (9503 9503 7098 7098 5202 5898 4395 7098 6401 7098 6401 5098 5598 4395 5898) (7097 6400 6400 7097 8576 7602 7097 6400 6400 4396) (8490 7201 6402 4799 8099 6402 6898 6898 8099 6898 6402 6402 5998 5694 5998) (9301 8490 8404 8099 6898 7603 6401 5999 5696 5696 7200 7200 6401 6401 6401 5696) (7402 7099 7402 4698 7402 7099 6800 4999 6800 6200 5894 4698 4698) (7402 7402 8002 7402 7402 5893 7402 7402 6800 8002 5893 6200 5893 5000) (8099 7603 6401 7603 6401 7603 4794 8099 6000 6000 5201 6401 4794 6000) (8100 8100 4794 6000 7603 8100 8100 6000 6401 6401 4794 6000 6000 4794) (7802 7401 7802 6200 6200 6200 7401 7401 7802 6200 6200 7401 7802 6200 6200 6200 7401 6200) (7805 6199 6600 7402 7402 6600 8100 4999 5398 7805 6600 4999 4999) (7098 7604 6584 5202 7789 7604 6800 5202 6401 7098 6199) (7604 6401 8300 7604 4998 6401 6800 6800 8004 7098 6401) (7603 8100 7603 8100 6000 7603 7603 7603 4796 6401 6000 6000 6000 7905 4796) (9305 9305 9305 8100 6401 7603 8100 8100 8100 5202 7603 7603 8100 6401) (8100 8100 9305 9305 6100 6100 6801 5600 8100 6484 8100 4892 6484 7604) (7604 8100 8100 8100 7604 4895 6700 7604 4895 7604 6099 7604 4895 8100 4895) (7603 7603 8143 8143 7905 7905 4393 7063 5599) (7903 7402 6700 5279 6401 6401 8099 6097 6401 6401 5498 4895 6700) (8100 9304 6585 7702 6899 6200 6585 4998 7702 4998 8100 6200 4998 4998) (7702 8098 6500 8098 7401 7702 4998 6500 8098 5299 7401 6200 9302) (7200 7604 7604 6401 5199 6786 8100 7604 5894 7200 7200 5199 5199 3994) (6400 7201 5999 7603 7603 7603 7603 5999 5894 3994) (7402 6883 6498 7402 7402 7402 7402 8100 7402 6267 4798 4798 8100 6498 6200 4089 4089) (8099 8099 6200 6200 5000 5000 7402 6200) (8100 7201 8100 6400 5999 7201 6400 5197 5197 3995 3995) (8404 8490 7201 8099 7201 7602 7374 8099 7602 6400) (7097 6399 7402 5199 5895 6800 8300 7402 5199 6200) (9503 9503 7097 6199 5195 8002 7097 7097 8374 6800 6800 7400 7400 6800 6199 6199 5894) (8100 6401 6401 8100 8100 6401 5198 6401 6401 5699 5699 5699) (8100 6898 6000 6000 4798 7602 5200))) :lonset (quote (93 1022 1904 2647 3437 4180 4969 5759 6502 7245 7988 8684 9474 10170 10913 11703 12678 13514 14211 14954 15697 16486 17229 18019 18808 19551 20387 21177 22012 22848 23824 24985 25985)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0))) :lchan (quote ((1 5 6 9 10 13 15 18 20 21 22 23) (1 2 7 8 9 10 11 12 13 14 15 16 18 20 22) (1 2 5 6 7 9 10 11 13 15 18 20 21 22 23) (3 7 8 9 11 13 14 15 18 22) (3 5 6 7 9 10 11 12 13 14 18 20 21 22 23) (1 2 3 5 7 8 9 10 13 15 16 17 18 20 22 23) (5 6 9 10 11 13 14 15 18 20 21 22 23) (1 2 5 7 8 9 10 11 12 13 15 20 22 23) (1 5 6 9 10 11 13 14 15 18 20 21 22 23) (1 5 7 8 9 11 12 13 15 18 20 21 22 23) (1 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20 22 23) (3 5 6 7 9 11 12 13 14 18 20 22 23) (1 5 9 10 11 13 14 15 18 20 21) (1 5 6 7 9 10 11 12 13 15 22) (5 6 7 8 9 10 11 12 13 14 15 20 21 22 23) (1 2 3 5 6 7 9 11 12 13 14 15 18 22) (1 2 5 6 9 10 11 13 14 15 18 20 22 23) (1 5 6 7 9 10 11 13 14 15 18 19 20 22 23) (7 8 9 11 13 14 15 18 22) (1 2 5 7 9 10 11 15 18 19 20 21 22) (1 2 5 7 8 9 11 13 14 15 18 20 22 23) (1 2 5 6 7 8 9 10 11 13 15 20 21) (1 7 8 9 10 11 13 14 15 16 17 20 22 23) (5 6 7 9 10 13 15 20 21 22) (1 5 6 7 8 9 10 11 12 13 14 15 18 19 20 22 23) (1 5 7 9 13 14 15 20) (7 8 9 10 13 16 18 20 21 22 23) (1 2 5 6 9 10 11 13 14 15) (1 5 6 7 9 10 11 13 14 15) (1 2 5 6 7 8 9 10 11 12 13 14 15 18 20 21 22) (1 9 10 11 12 13 15 18 20 21 22 23) (5 7 9 10 13 15 20))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 189 90) (om-make-point 790 436) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 313 143) (quote "3. evaluate this sequence object to get both the sound file and the chord-seq (NB. chord-seq not yet implemented!)$$Also NB: the orchestrate method should have eval-once enabled so it doesn't do the calculation twice") "" (om-make-point 386 824) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 231 91) (quote "2. choose your inputs:$<input-sound-file>$<orchestration: a string / list of instruments>$<nil for static, t for dynamic>$") "" (om-make-point 503 423) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 308 115) (quote "1. evaluate this. You have to choose the db file which ends with '.spectrum.db', such as 'TinySOL.spectrum.db'$$restrictions: The folder containing the sound files must be adjacent to this database file.") "" (om-make-point 453 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 561 145) (om-make-point 105 30) "Fl Fl Fl Fl Fl Fl" "\"Fl Fl Fl Fl Fl Fl\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor-orch-96078700.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 60 602) (om-make-point 241 132) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "A_minor-orch-96078700" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor-orch-96078700.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 277 165) (om-make-point 235 77) "Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb" "\"Fl Fl Ob Ob ClBb ClBb Bn Bn Hn Hn TpC TpC Tbn Tbn BTb Vn Vn Va Va Vc Vc Cb Cb\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "A_minor.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 11 180) (om-make-point 186 96) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "demo sounds")) :device :unspecific :host :unspecific :name "A_minor" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "A_minor.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SET-DB-FILE" (quote set-db-file) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 253 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (9 0 0 1 nil 0) (8 0 2 0 nil 0) (3 0 2 1 nil 0) (0 1 3 0 nil 0) (0 0 8 0 nil 0) (1 0 11 0 nil 0))) nil 6.18))
